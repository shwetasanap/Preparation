Serialization in Java is the process of converting an object into a byte stream so that it can be saved to a file, sent over a network, or stored in a database.


Without using transient, how can we achieve Serialization 
1) Use static keyword with fields because they belong to class and not instance-> when object is serialized then only instance 
vars are included and not class vars.
2)override the writeObject readObject methods explicitly add the fields to be serialized.

import java.io.*;
class Example implements Serializable {
   private static final long serialVersionUID = 1L;
   private String name;
   private String password; // We don't want to serialize this field
   public Example(String name, String password) {
       this.name = name;
       this.password = password;
   }
   private void writeObject(ObjectOutputStream oos) throws IOException {
       oos.defaultWriteObject(); // Serialize normal fields
       oos.writeObject(null); // Write null instead of actual password
   }
   private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {
       ois.defaultReadObject(); // Deserialize normal fields
       password = null; // Ensure password remains null
   }
   @Override
   public String toString() {
       return "Example{name='" + name + "', password='" + password + "'}";
   }
}

To serialize an object:

The class of the object must implement the Serializable interface (which is a marker interface with no methods).
The object can be serialized using the ObjectOutputStream class.
out.writeObject(person);


Deserialization is the reverse process of converting a byte stream back into a Java object.

To deserialize an object:
You use ObjectInputStream to read the object from the byte stream.
person = (Person) in.readObject();

SerialVersionUID:
While not mandatory, it's highly recommended to declare a serialVersionUID field in your class. 
This field helps with version control during deserialization, ensuring compatibility between serialized 
and deserialized objects even if the class has changed.

Transient Fields:
If you want to exclude a field from serialization (e.g., sensitive data like passwords), you can mark it with the transient keyword. 
Transient fields are not serialized.

Inheritance and Serialization:
If a subclass doesn't implement Serializable but its superclass does, the subclass's non-serializable fields will be skipped. 
However, the superclass's fields will still be serialized.
If a superclass implements Serializable, the subclass will inherit this behavior, and its fields will also be serialized (unless marked transient).


When deserializing an object, Java ensures that the class hierarchy is properly reconstructed. The parent class is deserialized first, followed by the child class.
If the superclass has a serialVersionUID, the subclass must either declare a serialVersionUID with the same value or allow Java to generate one automatically
based on the superclass's serialVersionUID. Otherwise, deserialization can fail if the serialVersionUID is not compatible.
