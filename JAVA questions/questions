1) Stack and heap memory
In Java, memory refers to the space allocated by the Java Virtual Machine (JVM) for storing variables, objects, methods,
and other data during the execution of a program.

----> Stack Memory in Java
Stored in computer RAM
In Java, Stack Memory is a special region on the memory where the JVM (Java Virtual Machine) keeps track of method execution.

Stack Memory in Java is used for static memory allocation and the execution of a thread. 
It contains primitive values that are specific to a method and references to objects referred from the method that are in a heap.

Access to this memory is in Last-In-First-Out (LIFO) order. Whenever we call a new method, a new block is created on top of 
the stack which contains values specific to that method, like primitive variables and references to objects.

When the method finishes execution, its corresponding stack frame is flushed, the flow goes back to the calling method, and space becomes available for the next method.
If this memory is full, Java throws java.lang.StackOverFlowError.


----> Heap Memory in Java
Heap Memory facilitates Dynamic Memory Allocation for Java objects and JRE classes during program execution.
Objects in the heap have global access, available from any part of the application.

 Differenc
---> Java Heap Space is used throughout the application, but Stack is only used for the method — or methods — currently running.

******************************************************************************************************************************************************************************************

2) Static keyword

Used with method,variables and class
In  case of multiple blocks then they will execute in the order they are defined.
That’s the reason, values initialized by first block are overwritten by second block.


In Java, the main difference between static variables, static methods, and static classes 
is that static variables and methods are associated with a class, while a static class is a class type


A static variable is instantiated once, a static method can be called from a class without instantiating 
an instance of the class, a static class cannot be instantiated. 


******************************************************************************************************************************************************************************************
3) System.out.println() and  System.err.println() 

System: It is a final class defined in the java.lang package.
out: This is an instance of PrintStream type, which is a public and static member field of the System class.
println(): As all instances of the PrintStream class have a public method println(), we can invoke the same on out as well. 
This is an upgraded version of print(). It prints any argument passed to it and adds a new line to the output. 
We can assume that System.out represents the Standard Output Stream.


System.out.println() will print to the standard out of the system.	              System.err.println() will print to the standard error.
System.out.println() is mostly used to display results on the console.	          System.err.println() is mostly used to output error texts.
It gives output on the console with the default(black) color.	                    It also gives output on the console but most of the IDEs give it a red color to differentiate.


******************************************************************************************************************************************************************************************

4) stack or heap memory is cleared in the garbage collection
Garbage Collection runs on the heap memory to free the memory used by objects that don't have any reference. 

******************************************************************************************************************************************************************************************

5) Java supports several key object-oriented programming (OOP) features:

---> Encapsulation: Bundling the data (attributes) and methods (functions) that operate on the data into a single unit, usually a class. 
Access to the data is restricted to methods within the class, often using access modifiers (private, public, protected).

---> Inheritance: The ability to create a new class (subclass) that inherits properties and behaviors (methods) from an existing class
(superclass). This promotes code reuse and establishes a hierarchical relationship between classes.

---> Polymorphism: The ability to treat objects of different classes that share a common superclass as objects of that superclass.
This includes method overloading (same method name with different parameters) and method overriding (subclass providing a specific implementation of a method already defined in its superclass).

---> Abstraction: The concept of hiding complex implementation details and showing only the essential features of an object. 
This is often achieved using abstract classes and interfaces, allowing you to define methods that must be implemented by 
subclasses without specifying how they should be implemented.

---> Classes and Objects: Java uses classes as blueprints to create objects. An object is an instance of a class, and it encapsulates 
both data and behavior.

---> Method Overriding: A subclass can provide a specific implementation of a method that is already defined in its superclass. 
This is a key aspect of achieving polymorphism.

---> Interfaces: Java allows the definition of interfaces, which are contracts that classes can implement.
An interface can contain abstract methods (without implementation) and constants, promoting a way to achieve abstraction and
multiple inheritance.

******************************************************************************************************************************************************************************************

6) Diamond problem and it's solution 

The "diamond problem" in Java arises when a class inherits from two classes that both inherit from a common superclass, 
creating an ambiguous situation regarding which superclass's methods or properties should be used. This is particularly 
relevant in languages that support multiple inheritance, like C++, but Java handles this differently.


Sol-1 :-  Single inheritance
sol-2 :- use interfaces

Referring to Default Methods: When a class implements multiple interfaces that have the same default method, super allows 
the class to specify which interface's implementation to invoke.

Syntax: The syntax InterfaceName.super.methodName() is used to call a default method from a specific interface.
In this case, Car.super.start(); calls the start() method defined in the Car interface.

E.g. :- 

interface Vehicle {
    void start();
}

interface Car {
    default void start() {
        System.out.println("Car is starting.");
    }
}

interface Motorcycle {
    default void start() {
        System.out.println("Motorcycle is starting.");
    }
}

class HybridVehicle implements Car, Motorcycle {
    @Override
    public void start() {
        // Resolve ambiguity by explicitly calling one of the default methods
        Car.super.start(); // or Motorcycle.super.start();
        System.out.println("HybridVehicle is starting.");
    }
}

public class Main {
    public static void main(String[] args) {
        HybridVehicle hv = new HybridVehicle();
        hv.start();
    }
}
******************************************************************************************************************************************************************************************

7) Difference between local and instance variable

Feature	                   Local Variables	                         Instance Variables

Scope                  	Limited to method/block	                    Accessible throughout the class
Initialization	         Must be initialized explicitly	             Automatically initialized to default values
Memory Location	            Stored on the stack	                     Stored in the heap
Lifetime	             Exists only during method execution	           Exists as long as the object exists

******************************************************************************************************************************************************************************************

8) Difference between arraylist and linkedlist

Feature	                                 ArrayList	                    LinkedList
Data Structure                        	Dynamic array	               Doubly linked list
Access Time                           O(1)	                               O(n)
Insertion/Removal                    	O(n)	                       O(1) at ends; O(n) elsewhere
Memory Overhead	                     Less overhead	               More overhead due to pointers
Use Case                           	Frequent access by index	      Frequent insertions/removals


******************************************************************************************************************************************************************************************

9) Difference between hashmap and treemap



Feature	                             HashMap                                       	TreeMap
Data Structure	                    Hash table	                                    Red-black tree
Ordering	                          No order	                                      Sorted order
Access Time	                       O(1)                                           average	O(log n)
Space Complexity                   Less overhead                                 	More overhead
Null Keys/Values	                 One null key, multiple null values	             No null keys, but allows null values
Use Case                         	Fast access, no order needed	                   Sorted keys required


******************************************************************************************************************************************************************************************

10) Difference between hashset and treeset


Feature	                            HashSet	                                        TreeSet
Data Structure	                   Hash table                                     	Red-black tree
Ordering	                         No order                                       	Sorted order
Access Time	                      O(1)                                           average	O(log n)
Space Complexity	                Less overhead	                                  More overhead
Null Elements	                   Allows one null	                               No null elements allowed
Use Case	                       Fast access, no order needed	                   Sorted elements required


******************************************************************************************************************************************************************************************

11) Difference between iterator and listiterator


Feature	                            Iterator	                                      ListIterator
Supported Collections	              Any Collection	                                  Only List
Direction of Traversal	             Forward only	                              Forward and backward
Modification	                       Removes only	                            Removes and modifies elements
Additional Methods	                 Basic methods only                      	More methods for list manipulation
Methods	                            hasNext(), next(), remove()	            hasNext(), next(), hasPrevious(), previous(),
                                                                           nextIndex(), previousIndex(), set(E e), add(E e)

******************************************************************************************************************************************************************************************


12) what is the purpose of java.util.concurrent package

The package includes thread-safe variants of commonly used collections, such as:

ConcurrentHashMap: A thread-safe version of HashMap that allows concurrent access and modifications without blocking the entire map.


It provides several synchronization constructs, such as:

Locks: The Lock interface and its implementations (like ReentrantLock) offer more flexible locking mechanisms than the traditional
synchronized methods/blocks.

Condition Variables: Condition objects allow threads to wait for specific conditions and notify others when conditions change, 
enhancing the synchronization capabilities.


******************************************************************************************************************************************************************************************

13) How does exception propagate throughout the java code




******************************************************************************************************************************************************************************************
14) What is Java EE

Java EE, or Java Platform, Enterprise Edition, is a set of specifications and standards that extend the Java SE (Standard Edition) 
to provide a robust platform for developing large-scale, distributed, multi-tiered enterprise applications. 

******************************************************************************************************************************************************************************************

15) Difference between thread and process


Threads and processes are fundamental concepts in operating systems and concurrent programming, 
but they serve different purposes and have distinct characteristics. 


Feature	                                   Process	                                                Thread
Definition	                               Independent program in execution	           Smallest unit of processing within a process
Memory Allocation	                        Separate memory space	                      Shares memory space with other threads
Overhead                                 	Higher overhead (creation/management)	      Lower overhead (creation/management)
Isolation	                                Isolated from other processes	              Not isolated; can affect each other
Life Cycle	                               More complex life cycle                          	Simpler life cycle
Use Cases	                                Suitable for isolated tasks	               Suitable for concurrent tasks


******************************************************************************************************************************************************************************************

16) Synchronized and volatile keyword :-

The synchronized modifier is only for methods and blocks not for variables and classes. Synchronized keyword comes into the picture when multiple threads are trying to get access to the same java object simultaneously. A synchronized block or method allows only one thread at a time to execute on a given object, which will solve the problem of data inconsistency.
To use synchronized keywords in Java we have two ways 1) Synchronized method 2) Synchronized block


A volatile keyword is a field modifier that provides a visibility guarantee. Java uses volatile as an indicator to the Java compiler and thread that does not cache the value of this variable and always reads it from the main memory. The volatile keyword is only used with variables not with methods or classes.
When a variable is marked as volatile, any read or write to that variable is done directly from the main memory (not from thread-local caches).
This ensures that the latest value of the variable is visible to all threads. Without volatile, each thread might have its own copy of the variable 
in its cache, and changes made by one thread might not be visible to others.
Example:-

class Test
{
boolean flag = true;
}
In the above example, suppose two threads are working on the same class. Both threads run on different processors where each thread has its local copy of the flag. And if any thread changes the value of the flag, in the main memory the value will not get reflected and because the other threads are not aware of the changed value it will lead to data inconsistency.

class Test
{
volatile boolean flag = true;
}
In the above example, we have declared the flag as volatile so that the value of the variable will never be stored in the cache. And all the read and write operations will be done from and to the main memory.

******************************************************************************************************************************************************************************************

17) Priority of threads in java 

Every Java thread has a priority that helps the operating system determine the order in which threads are scheduled. 
You can get and set the priority of a Thread.

MIN_PRIORITY: Specifies the minimum priority that a thread can have. 1

NORM_PRIORITY: Specifies the default priority that a thread is assigned. 5

MAX_PRIORITY: Specifies the maximum priority that a thread can have. 10

******************************************************************************************************************************************************************************************

18) Context switching in java

Thread Context Switch is a process of switching the working from one thread to another. The computer CPU stores the state of current 
thread, so that it can be retured later. Next it switches to the next thread, picks it where it was left before, and continuous to 
start working.

******************************************************************************************************************************************************************************************

19) sleep() and wait()

While the sleep() function is time-dependent and doesn't need any notice, the wait() method is time-independent and requires
notification from another thread. 

sleep --> does not releases lock on resource  
wait --> releases lock on resource 


******************************************************************************************************************************************************************************************
