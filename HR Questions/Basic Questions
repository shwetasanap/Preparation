1. Introduction :-
ESAG
Hello -- ,

Good morning/ Good afternoon/ Good Evening ,

I am shweta sanap.
I have completed my graduation in computer science from PICT with 9.81 CGPA.
Currently, I am working as a JAVA developer in BFDL since past 2.6 years where we have been delivering digitalized lending platform.
I am quite proficient in JAVA , SpringBoot , RestFul arch , s/w debugging and also have used db's like MySQL,MongoDB.
Also have pretty much knowledge about version control system like GIT,GITLAB.
I have also been recognised for my work and have received a spot award for good performance in my team.
So, with my skills and expertise i believe i would be able to contribute for the growth of this organisation.


2. Why leaving Bajaj :-

"I am looking to change my job because I am seeking an opportunity, that offers greater alignment with my skills and allows me to utilize 
my strengths and expertise to make a meaningful impact. I believe that a new environment will provide fresh challenges in order to increase my growth."


3. Project work :-

"In my role at Bajaj Finserv Direct Limited, I contributed in the following areas:

API Development & Integration: Developed and consumed RESTful APIs to improve application responsiveness.
Integrated AWS services like S3, SQS, and SNS for optimized data retrieval and message processing.

Code Optimization: Refactored legacy code using design patterns (Factory, Singleton, Builder),
enhancing maintainability and reducing bugs.

Microservices Architecture: Developed scalable microservices using Spring Boot and Java, 
improving system performance and scalability.

Testing & Code Quality: Ensured high test coverage with JUnit and Mockito, reducing bugs.
Automated code quality checks with SonarQube to reduce technical debt.

Collaboration: Facilitated Agile processes, improving team efficiency, and used Git and JIRA 
to streamline version control and issue tracking.

These efforts significantly improved the system's performance and enhanced team collaboration."
"I have 3 years of experience as a Java developer, primarily working on backend development using Spring Boot and MongoDB.
I’ve worked on scalable APIs, handled production issues, and contributed to multiple releases in Agile teams.
I’m also proactive in optimizing performance and improving code quality through unit testing and peer reviews. 
I enjoy working in collaborative environments and I’m now looking to take more ownership and grow in a team where
I can contribute both technically and strategically."

4. Notice period :-

My company is transitioning from a startup to a service-based model, and as part of this shift, 
the notice period was extended from 30 days to 90 days to align with industry standards and ensure smoother transitions.

I am also open to negotiate an early release based on discussions with my current employer.

5. Salary expectations :-

Based on my experience, skills and understanding of the role, I am expecting a salary in the range of [X to Y].
However, i am open to discussion based on the overall compensation package,benefits and growth opportunities within the company.

I appreciate the offer, and i am excited about the opportunity.However, based on my skills and experience and industry standards, 
i was expecting something
closer to x range.Is there flexibility to align it with my expectations.


Thank you so much for the offer! I’m excited about the opportunity to join [Company Name] and contribute to the team.
The compensation package you’ve provided is fair, and I’m happy to accept the salary of [$X] along with the other benefits
outlined. I’m looking forward to getting started and working with everyone.”


6. Where do you see yourself in next n years ?

In the next three years, I see myself growing into a senior software engineer role, taking on more responsibilities,
and improving my skills in system architecture and cloud technologies. I also hope to mentor junior developers and 
contribute to important technical decisions in the team.

7. Career aspirations ?

My career aspirations focus on continuous growth and skill improvement. I plan to stay updated with the latest industry 
trends, pursue certifications, and attend conferences to learn from experts. By improving my skills,
I aim to contribute innovative ideas and help the company succeed.



SDLC:-

SDLC (Software Development Life Cycle) is a structured process used for developing software applications.
It outlines a series of clearly defined phases or steps that guide teams through planning, creating, testing, 
deploying, and maintaining software. The main goal of SDLC is to produce high-quality software that meets user
requirements, is delivered on time, and is cost-effective.

### 1. **Requirement Gathering & Analysis**
- Stakeholders (clients, users, managers) share what the software should do.
- Requirements are collected, discussed, and documented in detail.
- Feasibility of the project is analyzed (can it be done, what are the risks, costs, etc.).

### 2. **Design**
- System architects and developers transform the requirements into a blueprint.
- High-level design: Defines software architecture, database design, technology stack.
- Low-level design: Details modules, interfaces, data flows, and algorithms.

### 3. **Implementation (Coding)**
- Developers write code as per the design documents.
- Tasks are divided among team members.
- Coding standards and best practices are followed.

### 4. **Testing**
- Testers check the software for defects (bugs) and verify it meets requirements.
- Types of testing: unit, integration, system, acceptance, etc.
- Issues found are reported to developers for fixing.

### 5. **Deployment**
- The tested software is released to the production environment.
- May involve staged rollouts (beta releases, pilot testing) before full launch.
- Users start using the system.

### 6. **Maintenance**
- Ongoing support after deployment.
- Includes fixing bugs, making improvements, adding new features, and adapting to new environments.
- Ensures the software continues to meet user needs over time.


**Requirement gathering** is **one of the most critical phases** of any project—whether it's software development, 
marketing, operations, or construction. Here's **why it matters so much**:

---

### ✅ 1. **Sets a Clear Foundation**
- It defines **what the project is meant to achieve**.
- Without clearly defined requirements, teams can go off-track fast, building something the client or end-user **doesn’t actually want**.

**Example:** Imagine building an app and finding out at launch that the client wanted offline access—but it was never discussed!

---

### ✅ 2. **Reduces Rework & Saves Time**
- When requirements are clear from the start, it reduces the chances of **costly changes** later.
- Fixing issues during or after development is way more expensive than getting it right from the beginning.

---

### ✅ 3. **Improves Communication**
- It ensures that **stakeholders, project managers, and developers** are all on the same page.
- It also helps manage **expectations**—everyone knows what will (and won’t) be delivered.

---

### ✅ 4. **Helps with Accurate Planning & Estimation**
- Requirements influence your:
  - **Timeline**
  - **Budget**
  - **Resources**
- Without them, planning is based on guesses, not facts.

---

### ✅ 5. **Drives Project Success**
- Most project failures stem from **poor or incomplete requirements**.
- Good requirements = higher chance of delivering something that solves the actual problem.

---

### 💬 In Summary:
> “If you don’t know where you're going, any road will get you there.”  
> — Requirements gathering makes sure you're headed in the **right** direction, with a **map** and a **purpose**.

---

Out of box thinking

Meetings productivity less so keep neeting on specific timings
issues solving sessions on fridays

when issue occurs how you tackle
Great question! Here’s a simple but effective way to explain **how you tackle issues** in a software development project (or any project) during an interview:

---

### **Answer:**

**"When an issue occurs, my first step is to stay calm and assess the situation. I prioritize understanding the root cause rather than just the symptoms.
I gather all the necessary information from the team or stakeholders, and then I break the problem down into manageable parts.**

**Next, I communicate with the team, discuss potential solutions, and decide on the best course of action.
If it’s something technical, I’ll collaborate with the engineers to find a fix. For larger issues, I escalate the
problem to the relevant stakeholders with a clear plan. Once we’ve implemented the solution, I make sure to review what happened,
document the findings, and put measures in place to avoid similar issues in the future."**

---

how you take feedback from other people

Sure! Here's a **simple and concise** version tailored to a **software company**:

---

### **Answer:**

**"When I receive feedback, I listen carefully and make sure I fully understand it by asking questions if needed.
I reflect on how I can improve based on the feedback, especially when it comes to code quality or development practices.
I apply the feedback right away and make the necessary changes. Afterward, I check in with the person who gave the feedback 
to make sure it met their expectations. This helps me improve and keeps communication open."**

---

why mastercard

In summary, Mastercard is more service-based in its approach, offering solutions that enable secure and efficient payment systems.
But they do offer physical products, like their branded cards, which serve as a means to access their payment network.

I’m excited about the opportunity to join Mastercard because of its leadership in innovative payment solutions and its commitment 
to financial inclusion. I’m passionate about working in a company that leverages cutting-edge technology to solve real-world problems,
and I believe my skills in [mention relevant skills/experience] align well with the impactful work Mastercard is doing. I’m eager to 
contribute to a global leader and grow in such a dynamic environment."





About my work :-



I was involved in developing the loan application dashboard, where I implemented dynamic filters to help users 
easily search and track loan applications. I also worked on the sanctions module, which involved designing workflows
 for multi-level approvals from higher authorities, ensuring compliance and proper authorization.
As part of the process, I integrated FCU (Field Credit Unit) activities into the application for verification 
and fraud checks. I also contributed to Master Data Management, allowing users to manage and update master records 
through the UI with proper validations and audit tracking.
In the loan decisioning section, I implemented appropriate design patterns to handle different types of loans efficiently. 
This module had around 12 different stages, and I ensured smooth transitions and logic flow across all stages based on the type of loan.
Apart from these, I contributed significantly to code enhancements by writing several small utility APIs, as well as 
RESTful services to communicate with other internal services for tasks like fetching loan status, customer data, and approval history.

In the **loan application process**, the **sanction module** plays a critical role in **evaluating, approving, and finalizing** the loan decision.
It typically comes **after the underwriting stage** and **before disbursement**. Here's a breakdown of what the sanction module does:

---

### 🔍 Key Functions of the Sanction Module:

1. **Loan Eligibility Confirmation**

   * Validates whether the borrower qualifies based on creditworthiness, income, collateral, etc.

2. **Final Risk Assessment**

   * Reconfirms risk parameters evaluated during underwriting (e.g. credit score, debt-to-income ratio).

3. **Approval Decision**

   * Based on the internal credit policy, the sanctioning authority (or automated system) approves or rejects the loan.
   * May include different approval levels depending on loan amount (e.g. branch manager, regional officer).

4. **Sanction Letter Generation**

   * A formal document is issued to the borrower, detailing:

     * Approved loan amount
     * Interest rate
     * Tenure
     * EMI schedule
     * Terms and conditions

5. **Document Checklist Verification**

   * Ensures all required documentation (KYC, income proof, collateral documents) is complete.

6. **Credit Limit Setup**

   * For revolving credit or working capital loans, sets up the sanctioned credit limit in the system.

7. **Internal Compliance Checks**

   * May involve legal or technical vetting (especially in home or secured loans).

---

### ⚙️ In Digital Loan Systems

In digital or automated loan processing systems (like in NBFCs or banks using core banking software), the **sanction module** is often integrated with:

* Credit decision engines
* CRM systems
* Document management systems
* Audit trails for regulatory compliance

---

### 🔁 Post-Sanction Activities (not part of sanction module but follow it)

* Disbursement of funds
* Repayment tracking
* Post-disbursement document collection


**CRM** stands for **Customer Relationship Management**. It refers to both the **strategy** and the **software systems** 
used by businesses to
manage interactions with customers and potential customers.

---

### 🔹 What is CRM? (Definition)

At its core, **CRM is a system that helps businesses manage relationships** with their customers throughout the customer
lifecycle — from first contact to after-sales support.

---

### 🔧 What Does CRM Do?

A CRM system helps businesses:

1. **Centralize Customer Data**

   * Store contact info, purchase history, communication logs, service requests, etc.

2. **Track Sales & Leads**

   * Monitor potential customers (leads) and follow up with them through the sales pipeline.

3. **Automate Communication**

   * Send automated emails, reminders, and updates to customers.

4. **Improve Customer Support**

   * Log service issues, track resolutions, and manage support tickets.

5. **Enhance Marketing Campaigns**

   * Segment customers and target them with personalized promotions.

---

### 🧠 CRM = Strategy + Technology

| **Aspect**     | **Details**                                                                                                  |
| -------------- | ------------------------------------------------------------------------------------------------------------ |
| **Strategy**   | Understanding customer behavior, building trust, and improving customer satisfaction.                        |
| **Technology** | Software tools like Salesforce, Zoho CRM, HubSpot, etc., that automate and streamline customer interactions. |

---

### 🏦 CRM in Banking & Loans

In the context of **loans or banking**, CRM systems help:

* Track loan applications and status for each customer
* Send reminders for document submission or EMI due dates
* Maintain customer histories for cross-selling (e.g., offering credit cards or insurance)
* Handle queries and complaints efficiently

---

### ✅ Example

If a customer applies for a loan:

1. The CRM logs their application.
2. Sends automatic follow-ups or alerts to sales staff.
3. Tracks each step (e.g., document collection, sanctioning, disbursement).
4. Stores all communication and updates.
5. Helps support teams respond if the customer calls with a query

In the context of loans, underwriting is the process of evaluating the risk of lending money to a borrower.
It's a critical step in the loan approval process where the lender determines whether the applicant qualifies for the loan, and under what terms.

🔍 What Is Loan Underwriting?
Loan underwriting is the risk assessment phase where the lender checks:

Can the borrower repay the loan?

What is the risk of default?

What interest rate or conditions should apply?


In the **context of loans**, **FCU** usually stands for **Fraud Control Unit**. The **FCU module** is a critical part of the **risk management** and **compliance** process in financial institutions, especially in digital lending, banks, NBFCs, and housing finance companies.

---

### 🔍 What is the FCU Module?

The **FCU (Fraud Control Unit) module** is designed to **detect, prevent, and investigate fraud** during the loan application process. It acts as a filter to identify **suspicious activities**, **fake documents**, or **high-risk profiles** before a loan is sanctioned or disbursed.

---

### 🧩 Key Functions of an FCU Module:

| **Function**                       | **Description**                                                                |
| ---------------------------------- | ------------------------------------------------------------------------------ |
| **Document Verification**          | Ensures submitted documents (ID, income proof, property papers) are genuine.   |
| **Field Verification**             | Field agents may physically verify address, job, or business location.         |
| **Digital Footprint Check**        | Examines borrower’s digital presence and patterns to detect anomalies.         |
| **Red Flag Identification**        | Flags duplicate PANs, mismatched addresses, or fraud-prone IP addresses.       |
| **Blacklist Screening**            | Checks against internal/external blacklists or watchlists.                     |
| **Pattern Analysis**               | Detects suspicious behaviors (e.g. multiple applications from same IP/device). |
| **Geo-tagging & Geo-verification** | Confirms borrower location using GPS data from mobile apps.                    |
| **Face Match / KYC Validation**    | Uses OCR, facial recognition, and video KYC tools to validate identity.        |

---

### 🏦 Why FCU is Important in Loan Processing

* Prevents **identity theft** and **document forgery**
* Protects against **loan stacking** (multiple loans from different lenders at once)
* Reduces **delinquency** and **NPA (Non-Performing Assets)**
* Ensures **regulatory compliance** with KYC/AML norms

---

### 🔄 Where FCU Fits in Loan Workflow

```text
Loan Application → Underwriting → FCU Checks → Sanction → Disbursement
```

Sometimes, FCU runs in **parallel** with underwriting or even **before** underwriting begins.

---

### ✅ Example

A borrower submits a loan application online. The FCU module:

* Matches their selfie with the ID photo using facial recognition
* Detects that the provided address has been flagged in a previous fraud case
* Flags the case for manual review or rejection

NBFC stands for Non-Banking Financial Company.

It is a financial institution that provides bank-like services (such as loans, credit, asset financing, investments, etc.) without holding a banking license.
NBFCs play a key role in lending, especially to underserved or niche segments, but they cannot accept demand deposits like savings or current accounts.

*************************************************************************************
1.Database Getting Too Slow
Challenge:
Database queries were taking too long as data grew.

What I Did:

Added indexes to commonly used columns.

Optimized slow SQL queries.

Result:
Reports and search results loaded much faster.

*************************************************************************************


Here are some common technical challenges you might have faced in your work, along with simple strategies to overcome them:

---

### 1. Implementing Dynamic Filters
**Challenge:**  
Handling a large number of filter combinations and keeping the UI responsive.

**How to Overcome:**  
- Use efficient data structures (like maps or sets) to quickly filter data.
- Implement debouncing for search/filter inputs to avoid unnecessary backend calls.
- Paginate or lazy-load results for better performance.

---

### 2. Multi-Level Approval Workflows
**Challenge:**  
Managing complex approval logic and avoiding bottlenecks or unauthorized approvals.

**How to Overcome:**  
- Use a clear workflow state machine or workflow engine.
- Define roles and permissions strictly in your authorization logic.
- Log every approval/rejection action for easy auditing.

---

### 3. Integrating FCU Activities (Verification & Fraud Checks)
**Challenge:**  
Coordinating between the main application and external verification/fraud services.

**How to Overcome:**  
- Use asynchronous APIs or messaging (like queues) for long-running checks.
- Implement good error handling and retry logic for external service failures.
- Clearly display the FCU status and errors to users.

---

### 4. Master Data Management with Validation & Auditing
**Challenge:**  
Maintaining data integrity and tracking changes reliably.

**How to Overcome:**  
- Centralize validation logic (on backend or shared library).
- Use database triggers or application code to log all changes (who, when, what).
- Provide a user-friendly UI to review audit history.

---

### 5. Loan Decisioning with Multiple Stages
**Challenge:**  
Managing logic flow for many different loan types and stages.

**How to Overcome:**  
- Apply design patterns like State or Strategy to handle different flows.
- Modularize stage logic so each stage is independent and easy to test.
- Use configuration files or tables to define stage transitions for flexibility.

---

### 6. Utility APIs & Service Integrations
**Challenge:**  
Maintaining clean, efficient, and consistent APIs.

**How to Overcome:**  
- Follow RESTful standards and consistent naming conventions.
- Document APIs clearly (use Swagger/OpenAPI).
- Write unit tests for each utility API.


*************************************************************************************
Behavioral Questions:
Prepare to answer questions about your experience with Spring Boot projects, challenges you've faced, and how you've overcome them. 
Be prepared to discuss your problem-solving approach, communication skills, and teamwork abilities. 
Understand Mastercard's core values and culture. 

*************************************************************************************
"My strengths are attention to detail, taking ownership, and quick learning. I ensure code quality and am proactive about resolving issues.
A weakness I’ve been working on is overthinking solutions initially — I now involve others early through design discussions to balance perfection with practicality."


