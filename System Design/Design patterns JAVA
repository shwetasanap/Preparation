Design patterns in Java are reusable solutions to common problems in software design, categorized as creational, 
structural, and behavioral, offering best practices for creating flexible, maintainable, and reusable code. 

It is just a template or set of guildelines to fllow in order to build a flexible and optimized solution.

1. Creational Patterns: Focus on object creation, providing flexible and reusable ways to instantiate objects. 

Singleton: Ensures a class has only one instance and provides a global point of access. 
Factory Method: Defines an interface for creating an object, but lets subclasses decide which class to instantiate. 

### Scenario:
You have different types of vehicles: **Car** and **Bike**, and you want to instantiate them based on a factory method.
---
### 1. **Product Interface**
```java
public interface Vehicle {
   void start();
}
```
---
### 2. **Concrete Products**
```java
public class Car implements Vehicle {
   @Override
   public void start() {
       System.out.println("Car is starting...");
   }
}
public class Bike implements Vehicle {
   @Override
   public void start() {
       System.out.println("Bike is starting...");
   }
}
```
---
### 3. **Creator (Factory)**
```java
public abstract class VehicleFactory {
   public abstract Vehicle createVehicle();
}
```
---
### 4. **Concrete Factories**
```java
public class CarFactory extends VehicleFactory {
   @Override
   public Vehicle createVehicle() {
       return new Car();
   }
}
public class BikeFactory extends VehicleFactory {
   @Override
   public Vehicle createVehicle() {
       return new Bike();
   }
}
```
---
### 5. **Client Code**
```java
public class Main {
   public static void main(String[] args) {
       VehicleFactory factory;
       String vehicleType = "car"; // or "bike"
       if ("bike".equalsIgnoreCase(vehicleType)) {
           factory = new BikeFactory();
       } else {
           factory = new CarFactory();
       }
       Vehicle vehicle = factory.createVehicle();
       vehicle.start();
   }
}
```
---

Builder: Separates the construction of a complex object from its representation, allowing different representations to be created. 
The Builder Design Pattern is a creational design pattern used to construct complex objects step by step. 
It separates the construction of an object from its representation so the same construction process can create different representations.
When to Use Builder Pattern
• When an object needs to be created with many possible configuration options.
• When object construction is complex (e.g., has optional fields or nested structures).
• When you want to make your code more readable and maintainable.
Participants
1 Builder – An interface that defines the steps to build the product.
2 ConcreteBuilder – Implements the Builder interface to construct and assemble parts.
3 Product – The complex object being built.
4 Director (optional) – Controls the building process.
Example in Java
Product Class:
public class Pizza {
   private String dough;
   private String sauce;
   private String topping;
   public Pizza(String dough, String sauce, String topping) {
       this.dough = dough;
       this.sauce = sauce;
       this.topping = topping;
   }
   @Override
   public String toString() {
       return "Pizza with " + dough + ", " + sauce + ", " + topping;
   }
}
Builder Class:
public class PizzaBuilder {
   private String dough;
   private String sauce;
   private String topping;
   public PizzaBuilder setDough(String dough) {
       this.dough = dough;
       return this;
   }
   public PizzaBuilder setSauce(String sauce) {
       this.sauce = sauce;
       return this;
   }
   public PizzaBuilder setTopping(String topping) {
       this.topping = topping;
       return this;
   }
   public Pizza build() {
       return new Pizza(dough, sauce, topping);
   }
}
Usage:
public class Main {
   public static void main(String[] args) {
       Pizza pizza = new PizzaBuilder()
                       .setDough("Thin Crust")
                       .setSauce("Tomato Basil")
                       .setTopping("Mozzarella")
                       .build();
       System.out.println(pizza);
   }
}
Advantages
• More readable code (especially with method chaining).
• Helps with immutability.
• Avoids constructor telescoping (too many constructor parameters).
• Makes object creation more flexible.
2. Structural Patterns: Deal with how classes and objects are composed to form larger structures. 
Bridge: Decouples an abstraction from its implementation so that the two can vary independently. 

3. Behavioral Patterns: Focus on communication and responsibilities between objects. 
Strategy: Defines a family of algorithms, encapsulates each one, and makes them interchangeable. 
