---
## **What is PL/SQL?**
PL/SQL stands for Procedural Language extension to SQL.
It's Oracle's procedural extension for SQL, and it allows writing blocks of code that include variables, 
conditions, loops, and error handling.
---
## **1. Structure of a PL/SQL Block**
Every PL/SQL program has this basic structure:
```sql
DECLARE
  -- Variable declarations (optional)
BEGIN
  -- Executable statements (mandatory)
EXCEPTION
  -- Error handling (optional)
END;
```
### Example:
```sql
DECLARE
  v_name VARCHAR2(20);
BEGIN
  v_name := 'John';
  DBMS_OUTPUT.PUT_LINE('Hello, ' || v_name);
END;
```
---
## **2. Data Types**
Some commonly used data types:
- `VARCHAR2(size)` – for strings
- `NUMBER(p,s)` – for numbers
- `DATE` – for date values
- `BOOLEAN` – for true/false
---
## **3. Variables**
Declare variables in the `DECLARE` section:
```sql
DECLARE
  v_salary NUMBER(8,2);
  v_name VARCHAR2(30);
```
---
## **4. Control Structures**
### **IF-THEN-ELSE**
```sql
IF condition THEN
  -- statements
ELSIF another_condition THEN
  -- statements
ELSE
  -- statements
END IF;
```
### **LOOPS**
#### **Basic Loop:**
```sql
LOOP
  -- statements
  EXIT WHEN condition;
END LOOP;
```
#### **WHILE Loop:**
```sql
WHILE condition LOOP
  -- statements
END LOOP;
```
#### **FOR Loop:**
```sql
FOR i IN 1..10 LOOP
  DBMS_OUTPUT.PUT_LINE(i);
END LOOP;
```
---
## **5. Cursors**
Used to fetch multiple rows from a query.
### **Implicit Cursor:**
Automatically used for `SELECT INTO`, `INSERT`, `UPDATE`, etc.
### **Explicit Cursor:**
```sql
DECLARE
  CURSOR emp_cursor IS SELECT emp_name FROM employees;
  v_name employees.emp_name%TYPE;
BEGIN
  OPEN emp_cursor;
  LOOP
     FETCH emp_cursor INTO v_name;
     EXIT WHEN emp_cursor%NOTFOUND;
     DBMS_OUTPUT.PUT_LINE(v_name);
  END LOOP;
  CLOSE emp_cursor;
END;
```
---
## **6. Procedures and Functions**
### **Procedure:**
Does not return a value.
```sql
CREATE OR REPLACE PROCEDURE greet_user(name IN VARCHAR2) IS
BEGIN
  DBMS_OUTPUT.PUT_LINE('Hello, ' || name);--> inbuilt package to pri nt message
END;
```
### **Function:**
Returns a value.
```sql
CREATE OR REPLACE FUNCTION get_sum(a IN NUMBER, b IN NUMBER) RETURN NUMBER IS
BEGIN
  RETURN a + b;
END;
```
---
## **7. Exception Handling**
Used to handle errors.
```sql
BEGIN
  -- Some operation
EXCEPTION
  WHEN NO_DATA_FOUND THEN
     DBMS_OUTPUT.PUT_LINE('No data found');
  WHEN OTHERS THEN
     DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
```
---
## **Other Common Inbuilt Exceptions:**
| Exception Name       | Raised When... |
|----------------------|----------------|
| `NO_DATA_FOUND`      | `SELECT INTO` returns no rows |
| `TOO_MANY_ROWS`      | `SELECT INTO` returns more than one row |
| `ZERO_DIVIDE`        | Division by zero occurs |
| `VALUE_ERROR`        | Conversion errors, wrong data type, string too long |
| `INVALID_CURSOR`     | Invalid cursor operations |
| `OTHERS`             | Catches all other unhandled exceptions |
---
