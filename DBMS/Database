1. Issues with traditional file based system:
- absence of indexing, super slow, high processing time, redundancy, inconsistency, unorganised data.

2. Advantages of DBMS and explaination:
- Data is collection of a distinct small unit of information. It can be used in variety of forms like text,numbers,media,etc.
- Structured Query Language used for accessing and manipulating data in dB(MySQL is a relational database management system)
  CRUD ops on db , tables, columns and records.
- A database schema is a logical representation of data that shows how the data in a database should be stored logically. 
  It shows how the data is organized and the relationship between the tables.
  Database schema contains table, field, views and relation between different keys like primary key, foreign key.
- A Database is defined as a structured form of data storage in a computer or a collection of data in an organized manner and can be accessed in various ways. 
  It is also the collection of schemas, tables, queries, views, etc. Databases help us with easily storing, accessing, and manipulating data held on a computer.
  The Database Management System allows a user to interact with the database.
  SQL provides various commands to interact with DB.
- DBMS stands for Database Management System. It is a software program that primarily functions as an interface between the database and the end-user. 
  It provides us the power such as managing the data, the database engine, and the database schema to facilitate the organization and manipulation of 
  data using a simple query in almost no time.

o	Hierarchical databases (DBMS)
o	Network databases (IDMS)
o	Relational databases (RDBMS
o	Object-oriented databases
o	Document databases (Document DB)
o	Graph databases
o	ER model databases
o	NoSQL databases
RDBMS stands for Relational Database Management System. It is a database management system based on a relational model. 
It facilitates you to manipulate the data stored in the tables by using relational operators. RDBMS stores the data into the collection of tables
and links those tables using the relational operators easily whenever required.

- Data sharing, integrity(accuracy, consistency) constraints ensures organised and refined data, controlling redundancy, 
  provides backup and recovery failure, data security(authentication and encryption), 
  independence of data(can change structure of data without changing structure of application program).

3. Different languages of DBMS:
  Database Language is a special type of programming language used to define and manipulate a database.
a. Data Definition Language (DDL): provides the ability to define, create and modify database objects such as tables, views, indexes, and users. E.g., CREATE, ALTER, DROP, TRUNCATE, RENAME, etc.
    CREATE -> CREATE TABLE table_name (column1 data_type, column2 data_type, ...);
    DROP -> DROP TABLE table_name;
    ALTER -> ALTER TABLE table_name ADD COLUMN column_name data_type;
    TRUNCATE -> TRUNCATE TABLE table_name;
    COMMENT -> COMMENT 'comment_text' ON TABLE table_name;  // Add comments to the data dictionary.
 
b. Data Modification Language (DML): used to query, and perform CRUD operations on row-level data from database tables. E.g., UPDATE, INSERT, DELETE, etc.
    INSERT -> INSERT INTO table_name (column1, column2, ...) VALUES (value1, value2, ...);
    UPDATE -> UPDATE table_name SET column1 = value1, column2 = value2 WHERE condition;
    DELETE -> DELETE FROM table_name WHERE condition;
    LOCK -> LOCK TABLE table_name IN lock_mode;
    CALL -> CALL procedure_name(arguments);

c. Data Query Language (DQL): used to perform queries on data of DB. Gets data based on query and it’s conditions.
    SELECT -> SELECT column1, column2, ...FROM table_name<br>WHERE condition;

d. Data Control Language (DCL): deal with the user permissions and controls of the DB. E.g., GRANT and REVOKE.
    GRANT -> GRANT privilege_type [(column_list)] ON [object_type] object_name TO user [WITH GRANT OPTION];
    REVOKE -> REVOKE [GRANT OPTION FOR] privilege_type [(column_list)] ON [object_type] object_name FROM user [CASCADE];
    // Removes previously granted privileges from a user account

e. Transaction Control Language (TCL): deal with the transaction of the database. E.g., COMMIT(permanently save changes), ROLLBACK, and SAVEPOINT.
  COMMIT -> COMMIT;  // Saves all changes made during the transaction.
  ROLLBACK -> ROLLBACK; // Undoes all changes made during the transaction.
  SAVEPOINT -> SAVEPOINT savepoint_name; // used to rollback certain operations and not the entire transaction, save point saves the transaction.

4. ACID properties:
A database transaction having these properties is known as ACID transaction.

ACID properties enforce reliability in database transactions by maintaining atomicity, consistency, isolation, and durability. 
They prevent database corruption by bad transactions and provide recoverability after failures. 

a. Atomicity: All the changes to data must be performed successfully or not at all.
b. Consistency: integrity constraints must be maintained so that Data will be consistent before and after a transaction.
c. Isolation: No other process can change the data while the transaction is running.
d. Durability: The changes made by a transaction must persist. Data is not lost in cases of a system failure or restart.

5. What is meant by an entity-relationship (E-R) model? Explain the terms Entity, Entity Type, and Entity Set in DBMS.
- An Entity-Relationship model is a diagrammatic approach to design DB, where real world objects are represented as entities 
  and relationships between them are mentioned.
- Entity: is a real-world object that can be uniquely identified by its attributes.
  An entity can be of two types :
  Tangible Entity : that exist in the real world physically. Example: Person, car, etc.
  Intangible Entity : that exist only logically and have no physical existence. Example: Bank Account, etc.
- Entity Type: Collection of entities with same attributes. 1 or more related tables in a database represent an entity type.
- Entity Set: Set of all the entities present in a specific entity type in a database.
Eg: A table Student has records of Ram, Sham and Kisam with attributes name, class, marks.
    So collection of entities Ram(E1) and Sham(E2) of the entity type Student forms an Entity Set.
Entities -> Rectangle
Relation -> Diamond
Attributes -> Oval

6. What is Normalization and Denormalization? 
* Normalization: Technique to minimize the redundancy and anomalies by organizing the data into multiple tables. 
- Removes row level duplicacy, by introducing unique key constraint.
- Column level duplicacy can lead to insertion anomaly, deletion anomaly and updation anomaly.
Observe below table.

SID	 Sname	 Cid	 Cname	 FID	  Fname	Salary
1	    RAM	    C1	  DBMS	  F1	  John	30000
2	    Ravi	  C2	  JAVA	  F2	  Bob	  40000
3	    Nitin	  C1	  DBMS	  F1	  John	30000
4	    Amrit	  C1	  DBMS	  F1	  John	30000

Insertion anomaly: Consider inserting a new course for which no student has enrolled, this cannot be done as SID has to be non-null.
Deletion anomaly: Consider deleting SID 2 info, which will ultimately delete all the info of course C2.
Updation anomaly: Consider updating salary of F1 faculty, you'll need to update 3 records which is unnecessary. 
- So normalization means dividing the above table into 3 different tables, Student, Course and Faculty.
- Normalization is putting data in multiple tables to avoid redundancy.

Denormalization: combines data and organizes into a single table.
JOIN operation allows us to create a denormalized form of the data by reversing the normalization. 
Benefits: 
1. Faster data read operations.
2. High data availability.
3. Data is fetched from single location.
Challenges: 
1. Redundant data.
2. Wastage of memory.
3. Data inconsistency.

7. Explain different types of Normalization forms in a DBMS.

--> 1NF: No multivalued attributes and columns must have unique names. Resolution->separate rows or cols.

--> 2NF: 1NF + Table should not contain partial dependency. 
Partial dependency -> proper subset of candidate key determines a non prime attribute.
Prime attributes -> Attributes that form a candidate key.
Eg: table cols -> employee id, department id, office location.
- employee id & department id form a primary key which determines office location.
- but office location can be alone determined by department id. => partial dependency  //violates 2NF
Soln => divide the above table into 2 tables -> table1 = employeeid, dept id and table2 = dept id, office location.


--> 3NF: 2NF + No transitive dependency on non prime attributes, i.e. C -> B -> A implies C -> A, this violates 3NF. 
No non prime should determine non prime (B -> A).
Eg: table cols: Student id, Student name, Subject id, Subject, Address
Student id -> Subject id -> Subject <==> Student id -> Subject  // violates 3NF
Soln => divide table into: table1 = Student id, Student name, Subject id, Address & table2 = Subject id, Subject
(Student id also defines subject and subject id defines subject)

--> BCNF: A stricter 3NF where every determinant is a candidate key, i.e. each non-key attribute is dependent only on the candidatekey/superkey.
X -> Y  //X should be candidate key or super key.
Eg: table cols -> student id, subject, professor  // Student -> Professor & Subject -> Professor. // non prime attribute determines another non prime attribute.
Soln -> divide table into: table1 = Student id, professor id, Address & table2 = professor id, subject, professor

--> 4NF: BCNF + Ensures no multi-valued dependencies.
Eg: Shourya has 3 mobile numbers and 3 email ids -> so to follow 1NF we'll end up creating 9 rows with each possible combination. // redundant
Soln -> Since mobile number and emails are independent create 2 separate tables. 1 mapping shourya to email & 1 mapping shourya to mobile.

--> 5NF: Lossless Decomposition of tables to eliminate redundancy and improve data integrity.

8. Explain different types of relationships amongst tables in a DBMS.
  1. One to One Relationship
  2. One to Many Relationship
  3. Many to Many Relationship
  4. Self Referencing Relationship 

9. Explain different levels of data abstraction in a DBMS.
    
10. What is Data Warehousing?
  
11. Explain the difference between a 2-tier and 3-tier architecture in a DBMS.

12. Explain different types of keys in a database. 
-> mainly 7 types of keys
* Candidate Key : The minimal set of attributes that can uniquely identify a tuple
* Super Key : A set of one or more columns that can uniquely identify a row in a table (Eg: {EmpID}, {Email}, {Phone}, {SSN}, {EmpID, Email}, etc)
* Primary Key : There can be more than one candidate key in relation out of which one can be chosen as the primary key and cannot be null.
* Unique Key : A unique key is a set of one or more than one fields/columns of a table that uniquely identify a record in a database table and can be null.
* Alternate Key : The candidate key other than the primary key is called an alternate key .
* Foreign Key : A FOREIGN KEY is a field (or collection of fields) in one table, that refers to the PRIMARY KEY in another table. 
                The table with the foreign key is called the child table, and the table with the primary key is called the referenced or parent table.
* Composite Key : To uniquely identify rows of a table, a combination of two or more columns/attributes can be used.

E.g.:-
EmpID	   Email	              Phone        SSN        Name
101	  alice@example.com	    1234567890	123-45-6789	  Alice
102  	bob@example.com	      9876543210	987-65-4321	  Bob
103	  charlie@example.com	  5556667777	555-66-7777	  Charlie


13. What integrity rules exist in the DBMS?
* Entity Integrity:- Primary key can never be NULL.
* Referential Integrity:- The values of the foreign key in a tuple of relation R1 can either take the values of the primary key for some tuple in relation R2(where FK is PK), 
                         or can take NULL values, but can’t be empty.
* Domain constraint :- Domain constraints can be defined as the definition of a valid set of values for an attribute.
* Key Constraints :- ensures uniqueness of entity within entity set.
* Not-Null Constraints :- It specifies that within a tuple, attributes overs which not-null constraint is specified must not contain any null value.
* Primary Key Constraints :- It states that the primary key attributes are required to be unique and not null. 



Data consistency means that the data is the same across all locations, while data integrity means that the data is accurate, complete, and reliable.


14. Explain the difference between intension and extension in a database.

15. 

16. What is the difference between having and where clause? 
- WHERE clause cannot be used with aggregate functions(MIN(), MAX(), AVG(), SUM(), COUNT()), but the HAVING clause can.
- we use WHERE prior to GROUP BY and HAVING after GROUP BY. 
- Eg:
  SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders
  FROM Orders
  INNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID
  WHERE LastName = 'Davolio' OR LastName = 'Fuller'
  GROUP BY LastName
  HAVING COUNT(Orders.OrderID) > 25;

17. What is the difference between a database schema and a database state?
State: The collection of information stored in a database at a particular instance.
Schema: The overall design of the database.

18. What is Identity? 
Identity/GUID(globally unique identifier) -> automatically generates numeric values.
A start and increment value can be set for Identity.
Value of GUID cannot be controlled.
These do not need to be indexed. 

19. What is a view in SQL? How to create a view?
- A view is a virtual table based on the result-set of an SQL statement. We can create it using CREATE VIEW syntax. 
- Views can represent a subset of the data contained in a table.
- a view can limit the degree of exposure of the underlying tables
Eg: 
CREATE VIEW view_name AS
SELECT column_name(s)
FROM table_name
WHERE condition

20. What is a Trigger? 
A Trigger is a code associated with insert, update or delete operations. 
The code is executed automatically whenever the associated query is executed on a table.
Key Points :-
          Triggers cannot be manually invoked or executed.
          There is no chance that triggers will receive parameters.
          A transaction cannot be committed or rolled back inside a trigger.

TYPES :- Before and After for Insert,Update,Delete.
Syntax of Trigger in SQL-->
                    CREATE TRIGGER Trigger_Name  
                    [ BEFORE | AFTER ]  [ Insert | Update | Delete]  
                    ON [Table_Name]  
                    [ FOR EACH ROW | FOR EACH COLUMN ]  
                    AS  
                    Set of SQL Statement  

Use :- 

Data integrity: Triggers allow you to enforce complex business rules and constraints at the database level, ensuring that data remains consistent and accurate.

Automation: Triggers can automate repetitive or complex tasks by executing predefined actions whenever a specified event occurs. This reduces the need for manual intervention and improves efficiency.

Audit trails: Triggers can be used to track changes made to data, such as logging modifications in a separate audit table. This helps in auditing and maintaining a history of data changes.

Data validation: Triggers can perform additional validation checks on data before it is inserted, updated, or deleted, ensuring that only valid and conforming data is stored in the database.

21. What is indexing?
- technique used to optimize the speed and efficiency of data retrieval operations.
- Implemented using B-tree or hash table data structures that stores sorted column values with pointers to the corresponding rows.
- Primary Index: Automatically created for a primary key column.
- Secondary Index: Additional indexes can be created on other columns to optimize specific queries.
- Trade-Off: While indexes improve read performance, they can slow down write operations (like INSERT, UPDATE, and DELETE) 
  because the index itself needs to be updated.

CREATE INDEX index_name
ON table_name (column1, column2, ...);
22. What are clustered and non-clustered Indexes? 

23. What is CLAUSE in SQL?

They form specific parts of a SQL statement that perform a specific function and allow us to put constraints on data. 
The sql clauses can help filter out the data according to the users' needs. The main clauses are SELECT, FROM, WHERE, 
GROUP BY, HAVING, ORDER BY, INSERT, UPDATE, DELETE, and JOIN.

24. What is a Live Lock?

25. What is QBE? 

26. Why are cursors necessary in embedded SQL? 

        A cursor in SQL Server is a database object that allows us to retrieve each row at a time and manipulate its data.
        A cursor is nothing more than a pointer to a row. It's always used in conjunction with a SELECT statement. 
        It is usually a collection of SQL logic that loops through a predetermined number of rows one by one. 

Life Cycle of a cursor :-

1) Declare cursor ---> DECLARE cursor_name CURSOR  
                       FOR select_statement;  
2) Open cursor --->  OPEN cursor_name;  
3) Fetch current active row using cursor ---> FETCH NEXT FROM cursor INTO variable_list;  
4) CLOSE cursor_name;  
5) DEALLOCATE cursor_name;  

Fetch Data from the Cursor There is a total of 6 methods to access data from the cursor. They are as follows: 

FIRST is used to fetch only the first row from the cursor table. 
LAST is used to fetch only the last row from the cursor table. 
NEXT is used to fetch data in a forward direction from the cursor table. 
PRIOR is used to fetch data in a backward direction from the cursor table. 
ABSOLUTE n is used to fetch the exact nth row from the cursor table. 
RELATIVE n is used to fetch the data in an incremental way as well as a decremental way. 


Need of Cursor :-
-->Cursors allow us to process data row-by-row, which can be useful when we need to perform complex calculations or transformations on the data.
-->Cursors allow us to iterate over a result set multiple times, which can be useful when we need to perform multiple operations on the same data.


27. SQL Joins :-

SQL joins are used to retrieve data from multiple tables into a meaningful result set. It is performed whenever you need to fetch records from two or more tables. They are used with SELECT statement and join conditions.
The following are the most commonly used joins in SQL:
o	INNER JOIN --> common rows  
                SELECT table1.column1,table1.column2,table2.column1,....
                FROM table1 
                INNER JOIN table2
                ON  table1.matching_column = table2.matching_column;
o	LEFT OUTER JOIN --> common rows + left handed table rows
                SELECT table1.column1,table1.column2,table2.column1,....
                FROM table1 
                LEFT JOIN table2
                ON table1.matching_column = table2.matching_column;
o	RIGHT OUTER JOIN --> common rows + right handed table rows
                SELECT table1.column1,table1.column2,table2.column1,....
                FROM table1 
                RIGHT JOIN table2
                ON table1.matching_column = table2.matching_column;
o FULL JOIN ---> creates the result-set by combining results of both LEFT JOIN 
                 and RIGHT JOIN. The result-set will contain all the rows from both tables. 
                 For the rows for which there is no matching, the result-set will contain NULL values.



A SELF JOIN is used to join a table with itself. This join can be performed using table aliases.
e.g.  SELECT column_lists    
FROM table1 AS T1, table1 AS T2    
WHERE join_conditions;    


Cross Join in SQL produces a result set that contains the cartesian product of two or more tables. 
Cross join is also called a Cartesian Join. 
When CROSS JOIN is used with a WHERE clause, it behaves like INNER JOIN, filtering the results based on specific conditions.
CROSS JOIN is the best choice when we need to match each row of one table to every other row of another table. 
It is helpful in many applications where we need to obtain paired combinations of records.




28. IMP Points :-

•	A distributed database is a database that runs and stores data across multiple computers, 
as opposed to doing everything on a single machine. Typically, distributed databases operate on 
two or more interconnected servers on a computer network.
•	The client-server architecture refers to a system that hosts, delivers, and manages most of the 
resources and services that the client requests. In this model, all requests and services are delivered 
over a network, and it is also referred to as the networking computing model or client server network.



29. Data Warehousing

Data warehouses can collect data from many sources, including operational systems, databases, 
and external sources like social media and IoT devices.

30. What is the concept of sub-query/inner query/nested query in terms of SQL?
Sub-query is basically the query that is included inside some other query.

31. No SQL :-

NoSQL is a type of database management system (DBMS) that is designed to handle and store large volumes of unstructured and semi-structured data.
NoSQL databases use flexible data models that can adapt to changes in data structures and are capable of scaling horizontally to handle growing amounts of data.
The term NoSQL originally referred to “non-SQL” or “non-relational” databases, but the term has since evolved to mean “not only SQL”.

MongoDB is an open-source document database that provides high performance, high availability, and automatic scaling.
It is a NoSQL db.
NoSQL Database is used to refer a non-SQL or non relational database.
It provides a mechanism for storage and retrieval of data other than tabular relations model used in relational databases. 
NoSQL database doesn't use tables for storing data. It is generally used to store big data and real-time web applications.
Collection is a group of MongoDB documents. It is the equivalent of an RDBMS table.
A document is a set of key-value pairs. Documents have dynamic schema.
Dynamic schema means that documents in the same collection do not need to have the same set of fields or structure,
and common fields in a collection's documents may hold different types of data.

•	Use below command to get list of all databases.
-->> show dbs
•	To create a new database execute the following command.
-->> use DATABASE_NAME
•	To know your current working/selected database execute the following command
db
•	To drop the database execute following command, this will drop the selected database
-->> db.dropDatabase()
•	To create the new collection execute the following commands
-->> db.createCollection(name)
•	To get the list of collections created execute the following command
-->> Showcollections
•	To drop the selected collection execute the following command
-->> db.COLLECTION_NAME.drop()
•	Insert document in collection
-->> db.COLLECTION_NAME.insert(document)
•	To get the list documents in collection execute the following command
-->> db.COLLECTION_NAME.find()
•	db.[name of collection].update({},{$set: {}})
-->>db.students.updateOne(
   { name: "Alice" },select document criteria
   { $set: { age: 26 } }
)
-->> db.collection('inventory').deleteOne/ deleteMany({ status: 'D' });


Standard Questions :-

// EMPLOYEE WITH HIGHEST SALARY
SELECT name, salary FROM employee ORDER BY salary DESC LIMIT 1; 

// EMPLOYEE WITH SECOND HIGHEST SALARY
SELECT name, salary FROM employee WHERE salary < (SELECT MAX(salary) FROM employee) ORDER BY salary DESC LIMIT 1;

// EMPLOYEE WITH Nth HIGHEST SALARY
SELECT name, salary FROM employee ORDER BY salary DESC LIMIT (N-1), 1; where N-1 is offset tells to skip the no of rows after returning result and 1 is no of rows to be returned.


Optimization Technique-->Purpose
Indexing-->Speed up searches
Avoid SELECT *-->Reduce data load
Joins over subqueries-->Better performance
EXPLAIN plan-->Analyze query performance
Normalization-->Remove redundancy
Caching-->Reduce DB hits
Partitioning based on certain columns of table-->Speed up large table queries
Proper data types-->Save memory and improve speed
LIMIT clause-->Control result size
Query tuning-->Use efficient syntax
Batching-->Fewer round-trips(insert/update in bulk rather than doing it by single row)
Connection pooling-->Reuse connections
Archiving-->Keep active tables small




https://www.geeksforgeeks.org/sql-query-interview-questions/
https://www.datacamp.com/blog/top-sql-interview-questions-and-answers-for-beginners-and-intermediate-practitioners
https://upesonline.ac.in/blog/advanced-sql-interview-questions
https://www.interviewbit.com/sql-interview-questions/
