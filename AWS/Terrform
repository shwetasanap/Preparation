### What is Terraform?

Terraform is an **Infrastructure as Code (IaC)** tool developed by HashiCorp. It allows you to define, deploy, 
and manage infrastructure (like servers, databases, networks, etc.) using simple configuration files. 
Instead of manually setting up infrastructure, you write code to automate its creation, configuration, and management.

---

### Why Should a Java Developer Know Terraform?
1. **Modern Development Practices**:
   - As a Java developer, you might work in teams that follow **DevOps** practices, where managing infrastructure
     is automated to improve efficiency.
   - Terraform helps developers provision infrastructure required for Java applications 
     (e.g., deploying servers, load balancers, databases).

2. **Cloud Integration**:
   - Many Java applications run in the cloud (e.g., AWS, Azure, GCP). Terraform simplifies cloud resource management.

3. **Consistency and Reproducibility**:
   - By writing infrastructure as code, Terraform ensures that environments (e.g., dev, staging, production)
     are consistent and easy to replicate.

---

### Key Features of Terraform (Simple Explanation)
1. **Infrastructure as Code (IaC)**:
   - Write your infrastructure setup in a configuration file (e.g., `.tf` file) instead of manually creating resources.

2. **Multi-Cloud Support**:
   - Terraform supports multiple cloud providers like AWS, Azure, GCP, and even on-premise solutions. This makes it a versatile tool.

3. **State Management**:
   - Terraform keeps track of the infrastructure it creates using a "state file". This helps it know what resources exist 
     and how to manage them.

4. **Declarative Syntax**:
   - You declare **what** you want (e.g., "I need an EC2 instance") in a configuration file, and Terraform figures out **how** to create it.

5. **Execution Plan**:
   - Before making changes, Terraform shows you a plan of what it will do. This helps you avoid mistakes.

6. **Resource Dependencies**:
   - Terraform automatically handles dependencies between resources. For example, if a database needs to be created before 
     the application server, Terraform figures that out.

---

### How Terraform Works (Simple Steps)
1. **Write Configuration**:
   - Write the desired infrastructure in a `.tf` file.
   - Example:
     ```hcl
     provider "aws" {
       region = "us-west-2"
     }

     resource "aws_instance" "my_instance" {
       ami           = "ami-0c55b159cbfafe1f0"
       instance_type = "t2.micro"
     }
     ```

2. **Initialize**:
   - Run `terraform init` to download necessary plugins and initialize the project.

3. **Plan**:
   - Use `terraform plan` to preview the changes Terraform will make.

4. **Apply**:
   - Run `terraform apply` to create or update the infrastructure.

5. **Destroy**:
   - Use `terraform destroy` to delete the infrastructure when it's no longer needed.

---

### Terraform in the Context of Java Development
1. **Provisioning Environments for Java Applications**:
   - Use Terraform to set up environments like:
     - Virtual machines to host Java applications.
     - Databases like MySQL or PostgreSQL.
     - Load balancers for high availability.

2. **CI/CD Integration**:
   - Automate infrastructure provisioning as part of your CI/CD pipeline. For example:
     - Use Terraform to create a Kubernetes cluster where your Java application will run.

3. **Configuring Cloud Resources**:
   - Define cloud resources (e.g., AWS S3, Lambda, RDS) needed for your Java application.

4. **Scaling Applications**:
   - Automate scaling for your Java application by provisioning auto-scaling groups or load balancers.

---

### Simple Benefits of Terraform
1. **Automation**:
   - No more manual resource creation; everything is automated with code.

2. **Version Control**:
   - Store `.tf` files in Git to track changes and collaborate with your team.

3. **Reproducibility**:
   - Easily replicate infrastructure across environments.

4. **Multi-Cloud Flexibility**:
   - Manage resources across AWS, Azure, GCP, and more with a single tool.

5. **Cost Management**:
   - Destroy unused infrastructure to save costs with a single command.

---

### Common Terraform Interview Questions for Java Developers
1. **What is Infrastructure as Code (IaC), and why is it important?**
   - Explain how IaC tools like Terraform automate infrastructure management.

2. **How does Terraform ensure consistency across environments?**
   - Talk about state files and version-controlled configuration files.

3. **How would you use Terraform to provision infrastructure for a Java application?**
   - Mention setting up servers, databases, and load balancers with `.tf` files.

4. **What is the difference between `terraform plan` and `terraform apply`?**
   - `plan` previews changes; `apply` makes changes.

5. **How does Terraform handle resource dependencies?**
   - Explain that Terraform automatically determines dependencies based on the configuration.

---

### Quick Terraform Example for Java Applications
Here’s an example of provisioning an AWS EC2 instance for a Java application:

file name=main.tf
provider "aws" {
  region = "us-east-1"
}

resource "aws_instance" "java_app" {
  ami           = "ami-0c55b159cbfafe1f0" # Amazon Linux
  instance_type = "t2.micro"

  tags = {
    Name = "JavaAppServer"
  }
}
```

Commands to execute:
1. `terraform init` – Initialize the project.
2. `terraform plan` – Preview the changes.
3. `terraform apply` – Create the EC2 instance.

---
file name=terraform.tfstate
A Terraform state file (`terraform.tfstate`) is a
A Terraform state file (terraform.tfstate) is a JSON file that stores information about the resources that Terraform manages.

{
  "version": 4,
  "terraform_version": "1.4.0",
  "serial": 1,
  "lineage": "7c6b8eaf-dc5a-4b4a-a1a3-0d9e4f8c2a6e",
  "outputs": {
    "instance_ip": {
      "value": "3.92.189.73",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "example",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-0c55b159cbfafe1f0",
            "arn": "arn:aws:ec2:us-east-1:123456789012:instance/i-0abcd1234efgh5678",
            "availability_zone": "us-east-1a",
            "instance_type": "t2.micro",
            "private_ip": "192.168.1.1",
            "public_ip": "3.92.189.73",
            "tags": {
              "Name": "example-instance"
            }
          }
        }
      ]
    }
  ]
}
