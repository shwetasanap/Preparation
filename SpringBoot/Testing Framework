JUNIT :-

JUnit is a framework that provides annotations, assertions, and other tools to structure and execute unit tests.
It helps developers write automated tests to ensure that individual components of their code function as expected.
Spring Boot provides JUnit as a default test dependency, making it easy to integrate into your projects. 

JUnit helps verify the correctness of your code by comparing actual results with expected outcomes. 
Spring Boot provides built-in support for JUnit, including annotations like @SpringBootTest and @Test,
making it easy to write tests for Spring Boot components like controllers, services, and repositories. 

assertEquals(): Verifies that two values are equal. 
assertTrue(): Verifies that a condition is true. 
assertFalse(): Verifies that a condition is false. 

### **Core JUnit 5 Annotations**
| Annotation | Description |
|-----------|-------------|
| `@Test` | Marks a method as a test method. |
| `@BeforeEach` | Runs before each test method. Useful for setup. |
| `@AfterEach` | Runs after each test method. Useful for cleanup. |
| `@BeforeAll` | Runs once before all test methods in the class. Must be `static`. |
| `@AfterAll` | Runs once after all test methods in the class. Must be `static`. |
| `@DisplayName` | Sets a custom name for the test method for better readability. |
| `@Disabled` | Disables the test method or class; it will be skipped. |
 @SpringBootTest --> use for integration testing.It loads the entire application context to test the application together.
---
### **Advanced/Additional Annotations**
| Annotation | Description |
|-----------|-------------|
| `@Nested` | Allows defining nested test classes for grouping tests. |
| `@Tag` | Assigns a tag to categorize tests (e.g., `@Tag("slow")`). |
| `@ParameterizedTest` | Used for parameterized tests. Requires additional annotations like `@ValueSource`, etc. |
| `@ValueSource`, `@CsvSource`, etc. | Provide data inputs for parameterized tests. |
---
### **Assertions (Not annotations but commonly used with tests)**
JUnit 5 uses `Assertions.*` methods like:
- `assertEquals(expected, actual)`
- `assertTrue(condition)`
- `assertThrows(Exception.class, () -> code)`
---







### **What is Mocking?**
**Mocking** means creating fake versions (mocks) of objects so that:
- You **don’t rely on real dependencies** (like databases, APIs, services).
- You can **control behavior** and **verify interactions**.
---
a mocking framework that facilitates unit testing by allowing developers to create mock objects, 
which are dummy implementations of classes or interfaces, to isolate the code under test.

### **Common Mockito Annotations**
| Annotation | Purpose |
|-----------|---------|
| `@Mock` | Creates a mock instance of a class/interface. |
| `@InjectMocks` | Injects the mocks into the class under test (via constructor/setter/field). |
| `@Spy` | Wraps a real object but allows spying (monitoring method calls). |
| `@Captor` | Creates an `ArgumentCaptor` to capture method arguments. |
| `@ExtendWith(MockitoExtension.class)` | Needed in JUnit 5 to enable Mockito annotations. |
---
### **Basic Mockito Usage**
```java
@ExtendWith(MockitoExtension.class)
class UserServiceTest {
   @Mock
   UserRepository userRepository;
   @InjectMocks
   UserService userService;
   @Test
   void testGetUser() {
       User mockUser = new User("Alice");
       when(userRepository.findById(1)).thenReturn(Optional.of(mockUser));
       User result = userService.getUserById(1);
       assertEquals("Alice", result.getName());
       verify(userRepository).findById(1); // Verifies method was called
   }
}
```
---
### **Key Mockito Methods**
| Method | Description |
|--------|-------------|
| `when(...).thenReturn(...)` | Stubs a method to return a value. |
| `verify(mock).methodCall()` | Verifies that a method was called. |
| `doReturn(...).when(mock).method(...)` | Alternate stubbing syntax (used with spies). |
| `doThrow(...).when(mock).method(...)` | Simulates throwing exceptions. |
| `ArgumentCaptor<T>` | Captures method arguments for assertions. |
---
Let me know if you want a real-world example or want to dive into mocking static methods,
private methods, or constructors (with PowerMockito or Mockito 4+).



### **`@RunWith(MockitoJUnitRunner.class)` in Mockito**
In **JUnit 4**, to use Mockito annotations like `@Mock` and `@InjectMocks`, you need to enable them using:
```java
@RunWith(MockitoJUnitRunner.class)
public class SomeServiceTest {
   @Mock
   private SomeDependency dependency;
   @InjectMocks
   private SomeService service;
   @Test
   public void testSomething() {
       when(dependency.doSomething()).thenReturn("mocked");
       String result = service.useDependency();
       assertEquals("mocked", result);
       verify(dependency).doSomething();
   }
}
```
---
### **Why use `@RunWith(MockitoJUnitRunner.class)`?**
Because it:
- Initializes all `@Mock` annotated fields.
- Injects mocks into fields annotated with `@InjectMocks`.
- Saves you from calling `MockitoAnnotations.initMocks(this);` manually.
---
### **Alternative in JUnit 5**
In **JUnit 5**, instead of `@RunWith`, you use:
```java
@ExtendWith(MockitoExtension.class)
```
Example:
```java
@ExtendWith(MockitoExtension.class)
class SomeServiceTest {
   @Mock
   SomeDependency dependency;
   @InjectMocks
   SomeService service;
   // test methods...
}
```
---
@SpringBootTest` is used to test your full Spring Boot application.  
It starts the whole application, just like when you run it normally, so you can test everything together—like controllers,
services, and repositories.
### Example:
```java
@SpringBootTest
class MyTest {
   @Test
   void testAppStarts() {
       // This will check if the app context loads properly
   }
}
```
You can also tell it to start a web server if needed:
```java
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
```
So, use `@SpringBootTest` when you want to test how parts of your app work together.


| Method Type | Best Practice              | Direct Testing Option                     |
|-------------|----------------------------|-------------------------------------------|
| `private`   | Test via public methods    | Use Reflection or change to package-private |
| `static`    | Keep logic in instance methods if possible | Call directly or mock with `mockito-inline` |

Mockito Inline is an extension of Mockito Core including additional capabilities for mocking final classes, 
final fields, static methods, and constructors. This library is useful when you need to mock or stub these types of methods or classes.
