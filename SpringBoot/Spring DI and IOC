**Spring Dependency Injection** is a core concept in the Spring Framework, including Spring Boot. It is a design pattern 
in which an object’s dependencies (other objects it needs to work) are provided (injected) by the Spring container rather 
than the object creating them itself. This promotes loose coupling, easier testing, and better code maintainability.

## Types of Dependency Injection in Spring

1. **Constructor Injection**: Dependencies are provided via the class constructor.
2. **Setter Injection**: Dependencies are set via JavaBean-style setter methods.
3. **Field Injection**: Dependencies are injected directly into fields (not recommended for testability and immutability).

---

## Example: Constructor Injection in Spring Boot

Suppose you have a simple service that greets the user.

### Step 1: Define the Dependency (Service)

```java
// GreetingService.java
public interface GreetingService {
    String greet(String name);
}
```

```java
// GreetingServiceImpl.java
import org.springframework.stereotype.Service;

@Service
public class GreetingServiceImpl implements GreetingService {
    @Override
    public String greet(String name) {
        return "Hello, " + name + "!";
    }
}
```

### Step 2: Inject the Dependency

```java
// MyController.java
import org.springframework.web.bind.annotation.*;

@RestController
public class MyController {

    private final GreetingService greetingService;

    // Constructor injection
    public MyController(GreetingService greetingService) {
        this.greetingService = greetingService;
    }

    @GetMapping("/greet/{name}")
    public String greet(@PathVariable String name) {
        return greetingService.greet(name);
    }
}
```

### What Happens?

- Spring detects `@Service` and creates an instance of `GreetingServiceImpl` as a **bean**.
- When creating `MyController`, Spring sees that it needs a `GreetingService` and injects the `GreetingServiceImpl` bean.

---

## Summary Table

| Injection Type      | How it works                        | Example Code Snippet                    |
|---------------------|-------------------------------------|-----------------------------------------|
| Constructor         | Via constructor                     | `public MyController(GreetingService s)`|
| Setter              | Via setter method                   | `@Autowired public void setS(S s)`      |
| Field (not advised) | Directly into field                 | `@Autowired private S s;`               |

---

## Conclusion

With dependency injection, you let Spring handle the creation and wiring of objects, making your code more modular, easier to test, and maintain.

**Do you want a complete Spring Boot project example with these files?**




## 1. What is the Spring IoC Container?

- The **IoC Container** in Spring is a core part of the framework.
- It manages the creation and injection of objects (beans) based on configuration (via XML or annotations).
- In practice, the most common IoC container is the `ApplicationContext`.

---

## 2. Example: Annotation-based IoC Container

Let’s create a simple example with a service and a consumer (a controller):

---

### **GreetingService.java** (Bean Interface)

```java
public interface GreetingService {
    String greet(String name);
}
```

---

### **GreetingServiceImpl.java** (Bean Implementation)

```java
import org.springframework.stereotype.Service;

@Service // Marks this as a bean managed by the IoC container
public class GreetingServiceImpl implements GreetingService {
    @Override
    public String greet(String name) {
        return "Hello, " + name + "!";
    }
}
```

---

### **GreetingController.java** (Bean Consumer)

```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api")
public class GreetingController {

    private final GreetingService greetingService;

    // IoC Container automatically injects GreetingServiceImpl here
    @Autowired
    public GreetingController(GreetingService greetingService) {
        this.greetingService = greetingService;
    }

    @GetMapping("/greet/{name}")
    public String greet(@PathVariable String name) {
        return greetingService.greet(name);
    }
}
```

---

### **Main Application Class** (Bootstraps the IoC Container)

```java
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class IocDemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(IocDemoApplication.class, args);
    }
}
```

---

## 3. How the IoC Container Works Here

- When the application starts, Spring Boot creates an **ApplicationContext** (IoC Container).
- It scans for beans annotated with `@Service`, `@Component`, `@Controller`, `@RestController`, etc.
- It creates and manages these beans as singletons (by default).
- Whenever a bean (e.g., `GreetingController`) needs another bean (e.g., `GreetingService`), the container automatically injects it.

---

## 4. Testing the Example

- Start the app.
- Access: `http://localhost:8080/api/greet/World`
- You get:  
  `Hello, World!`

---

## **Summary Diagram**
```
ApplicationContext (IoC Container)
        |
        |---> GreetingServiceImpl (@Service)
        |---> GreetingController (@RestController)
                             |
                             |---> GreetingService (injected automatically)
```

---

**This is an example of how the Spring IoC container works using annotations in a modern Spring Boot project.**
Let me know if you want an example using XML configuration as well!
