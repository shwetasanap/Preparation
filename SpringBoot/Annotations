--> Spring Boot Annotations is a form of metadata that provides data about a program. In other words, annotations are used 
to provide supplemental information about a program. It is not a part of the application that we develop. 
It does not have a direct effect on the operation of the code they annotate. It does not change the action of the compiled program.


https://www.javatpoint.com/spring-boot-annotations
https://www.linkedin.com/pulse/spring-boot-important-annotations-abid-anjum

********************************************************************************************************************************************

--> ApplicationContext represents the Spring IoC container that holds all the beans created by the application. 
It is responsible for instantiating, configuring, and creating the beans. Additionally, it gets the beans' information 
from configuration metadata provided in XML or Java.

In Spring Boot, the ApplicationContext plays a crucial role in managing the lifecycle of the beans and the overall application configuration.
Spring Boot simplifies the setup of ApplicationContext through auto-configuration and annotation-based configuration.
Unlike traditional Spring applications, you don't need to manually configure or load the ApplicationContext—Spring Boot 
automatically does this when the application starts.

*******  Key Concepts of ApplicationContext in Spring Boot  *******

--> Auto-configuration:

Spring Boot automatically configures the ApplicationContext based on the dependencies added in the project and the properties defined in application.properties or application.yml.
For example, if you add spring-boot-starter-data-jpa as a dependency, Spring Boot will configure JPA repositories and related beans automatically.

--> @SpringBootApplication:

This annotation is a combination of three annotations:
@Configuration: Indicates that the class provides Spring beans.
@EnableAutoConfiguration: Enables auto-configuration.
@ComponentScan: Scans the package and sub-packages for Spring components (like beans, controllers, services, etc.).
It starts the process of auto-configuring the ApplicationContext and bootstraps the application.

--> ApplicationContext Initialization:

The entry point for a Spring Boot application is typically a main method with a call to SpringApplication.run(),
which bootstraps the application and creates the ApplicationContext.

--> Bean Management:

Spring Boot uses the ApplicationContext to manage beans, wire dependencies, and resolve configuration properties.
You can define beans in the context using annotations like @Component, @Service, @Repository, or by using @Bean inside a @Configuration class.

--> Profiles and Environment:

Spring Boot integrates environment support into the ApplicationContext, allowing you to manage different configurations for different environments (dev, prod, etc.) using profiles.
Profiles can be defined in the application.properties or application.yml, and the context loads the corresponding configuration.



Certainly! Here’s a concise guide to the **most important annotations in Spring Boot**. Spring Boot uses a lot of annotations from the core Spring Framework as well as its own to simplify configuration, dependency injection, and application development.

---

## **Core Annotations**

### **Application Setup**
- **@SpringBootApplication**  
  Combines `@Configuration`, `@EnableAutoConfiguration`, and `@ComponentScan`. Marks the main class of a Spring Boot application.

### **Configuration**
- **@Configuration**  
  Indicates that the class can be used by Spring IoC as a source of bean definitions.
- **@Bean**  
  Marks a method as producing a bean to be managed by Spring.

### **Component Scanning**
- **@Component**  
  Indicates a class is a Spring component (bean) auto-detected during classpath scanning.
- **@Service**  
  Specialized version of `@Component` for service layer classes.
- **@Repository**  
  Specialized version for DAO (data access) components.
- **@Controller**  
  Specialized for web controllers (MVC).
- **@RestController**  
  Shorthand for `@Controller` + `@ResponseBody`; used for REST APIs.

### **Dependency Injection**
- **@Autowired**  
  Injects dependencies automatically by type.
- **@Qualifier**  
  Specifies which bean to inject when multiple candidates exist.
- **@Primary**  
  Marks a bean as primary when multiple candidates exist.
- **@Value**  
  Injects values from property files.

### **Web & REST**
- **@RequestMapping**  
  Maps HTTP requests to handler methods (can specify path, method, etc.).
- **@GetMapping, @PostMapping, @PutMapping, @DeleteMapping, @PatchMapping**  
  Shortcut annotations for HTTP methods.
- **@PathVariable**  
  Binds URI template variable to method parameter.
- **@RequestParam**  
  Binds HTTP query parameter to method parameter.
- **@RequestBody**  
  Binds the body of the HTTP request to a method parameter.
- **@ResponseBody**  
  Indicates the return value should be bound to the web response body.

### **Persistence & Transactions**
- **@Entity**  
  Marks a class as a JPA entity (table).
- **@Table**  
  Specifies the table name for an entity.
- **@Id**  
  Marks a field as the primary key.
- **@GeneratedValue**  
  Configures primary key generation strategy.
- **@Column**  
  Maps a field to a database column.
- **@Transactional**  
  Marks a method or class as transactional.

### **Spring Boot Specific**
- **@EnableAutoConfiguration**  
  Enables Spring Boot’s auto-configuration mechanism.
- **@ComponentScan**  
  Tells Spring where to search for annotated components.
- **@SpringBootTest**  
  Used for integration testing in Spring Boot.

### **Validation**
- **@Valid**  
  Triggers validation on a method parameter.
- **@NotNull, @Size, @Min, @Max, @Pattern**  
  Standard validation annotations.

### **Scheduling & Asynchronous**
- **@Scheduled**  
  Marks a method to be scheduled (for tasks).
- **@EnableScheduling**  
  Enables scheduling support.
- **@Async**  
  Marks a method to run asynchronously.
- **@EnableAsync**  
  Enables asynchronous method execution.

### **Security**
- **@PreAuthorize, @PostAuthorize**  
  Method-level security.
- **@Secured**  
  Restricts method access.
- **@EnableWebSecurity**  
  Enables Spring Security.

---

## **Summary Table**

| Annotation           | Purpose/Usage                                   |
|----------------------|-------------------------------------------------|
| @SpringBootApplication | Main class, enables auto config & scan        |
| @Component, @Service, @Repository, @Controller, @RestController | Bean discovery & specialization |
| @Autowired, @Qualifier, @Primary, @Value | Dependency Injection        |
| @RequestMapping, @GetMapping, etc. | Map HTTP requests              |
| @Entity, @Id, @Table, @Column | JPA persistence                      |
| @Transactional       | Transaction management                          |
| @EnableAutoConfiguration | Enable auto-configuration                  |
| @SpringBootTest      | Integration testing                             |
| @Valid, @NotNull, etc. | Bean validation                              |
| @Scheduled, @Async   | Scheduling, async execution                     |
| @EnableWebSecurity   | Enable security                                 |

---

@Transactional is a Spring annotation used to manage database transactions automatically. 
When you apply @Transactional to a method or class, Spring ensures that the method 
(or all methods in the class) runs within a database transaction.

What does it do?
Begins a transaction before the method starts.
Commits the transaction if the method completes successfully.
Rolls back the transaction if a runtime (unchecked) exception occurs.

Without @Transactional, you lose atomicity (all-or-nothing behavior) for methods that make multiple database changes.
You risk data inconsistency and integrity issues if errors occur.
For simple single-step database operations, you might not notice a difference, but for anything more complex, @Transactional is important.
