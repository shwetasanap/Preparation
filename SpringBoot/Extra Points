https://www.geeksforgeeks.org/spring-boot-interview-questions-and-answers/
https://www.geeksforgeeks.org/spring-boot-aopaspect-oriented-programming/
https://www.geeksforgeeks.org/spring-jdbc-template/
https://www.tutorialspoint.com/spring_boot/spring_boot_rest_template.htm




Database connection in springboot project :-

In a Spring Boot project, database connection is typically managed through Spring Data JPA or JDBC, and it’s
made easier with Spring Boot’s auto-configuration.


1) Add necessary dependencies in pom.xml--> spring-boot-starter-data-jpa.
2) Configure database connection properties in application.properties or application.yml.
      spring.datasource.url=jdbc:mysql://localhost:3306/mydb
      spring.datasource.username=root
      spring.datasource.password=rootpassword
      spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
      spring.jpa.hibernate.ddl-auto=update
      spring.jpa.show-sql=true
      spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

3) Create JPA entity classes.

4) Spring Data JPA provides an easy way to interact with the database through Repositories. 
You create an interface that extends JpaRepository or CrudRepository to perform CRUD operations without needing 
to write implementation code.

5) Make sure to enable JPA repositories in your main application class using @EnableJpaRepositories.
6) Use @Autowired to inject the repository into services or controllers.

One of the key benefits of Spring Boot is its auto-configuration feature.
Based on the dependencies you include (like spring-boot-starter-data-jpa),
Spring Boot automatically configures the necessary components such as:

DataSource: Connection to the database.
EntityManagerFactory: For managing JPA entities.
TransactionManager: For managing transactions with the database.





