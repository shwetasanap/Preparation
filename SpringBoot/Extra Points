https://www.geeksforgeeks.org/spring-boot-interview-questions-and-answers/
https://www.geeksforgeeks.org/spring-boot-aopaspect-oriented-programming/
https://www.geeksforgeeks.org/spring-jdbc-template/
https://www.tutorialspoint.com/spring_boot/spring_boot_rest_template.htm




Database connection in springboot project :-

In a Spring Boot project, database connection is typically managed through Spring Data JPA or JDBC, and it’s
made easier with Spring Boot’s auto-configuration.


1) Add necessary dependencies in pom.xml--> spring-boot-starter-data-jpa.
2) Configure database connection properties in application.properties or application.yml.
      spring.datasource.url=jdbc:mysql://localhost:3306/mydb
      spring.datasource.username=root
      spring.datasource.password=rootpassword
      spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
      spring.jpa.hibernate.ddl-auto=update
      spring.jpa.show-sql=true
      spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

3) Create JPA entity classes.

4) Spring Data JPA provides an easy way to interact with the database through Repositories. 
You create an interface that extends JpaRepository or CrudRepository to perform CRUD operations without needing 
to write implementation code.

5) Make sure to enable JPA repositories in your main application class using @EnableJpaRepositories.
6) Use @Autowired to inject the repository into services or controllers.

One of the key benefits of Spring Boot is its auto-configuration feature.
Based on the dependencies you include (like spring-boot-starter-data-jpa),
Spring Boot automatically configures the necessary components such as:

DataSource: Connection to the database.
EntityManagerFactory: For managing JPA entities.
TransactionManager: For managing transactions with the database.


**************************************************************************************************************************************

In Spring Boot, both application.properties and bootstrap.properties are used to configure various aspects of your application,
but they have different purposes and are loaded at different stages of the application lifecycle.

1. application.properties

Purpose: The application.properties file is the most common configuration file in Spring Boot applications. 
It is used to configure application-specific properties locally.

When it's loaded: This file is loaded at the later stages of the Spring Boot application lifecycle, after the application context 
is created.

Usage: It's generally used for setting properties like database configurations, server ports, logging levels, etc.

Location: src/main/resources/application.properties (can also be application.yml).

server.port=8080
spring.datasource.url=jdbc:mysql://localhost:3306/mydb
spring.datasource.username=root
spring.datasource.password=secret
logging.level.org.springframework=DEBUG


In simple terms, bootstrap.properties is a configuration file used in Spring Boot applications that is loaded before the 
regular application.properties. It is mainly used to set up properties that are needed early in the startup process, such 
as connecting to an external configuration server (like Spring Cloud Config) or setting up the application’s environment.


Why use bootstrap.properties?
External Configuration: If your Spring Boot application is part of a larger system (like microservices), bootstrap.properties 
can be used to connect to a central place where configuration is stored (e.g., a configuration server).

Early loading: This file is loaded before other configuration files like application.properties, so it's useful for things 
that need to be configured very early, like connecting to a database or a configuration server.

# The URI of the configuration server
spring.cloud.config.uri=http://localhost:8888

# Name of the application to fetch configuration for
spring.application.name=my-service

# Active profile (like dev, prod)
spring.profiles.active=dev


How it Works:
Spring Boot will look for bootstrap.properties first, and if you’re using Spring Cloud, it will fetch the configuration 
from the server mentioned in spring.cloud.config.uri.
After the bootstrap.properties file is processed, the application will continue to load the application.properties 
file for other app-specific settings.


Spring Cloud Config – In Simple Terms
Spring Cloud Config is a tool that helps you manage and provide centralized configuration for applications in a distributed 
system or microservices architecture. Instead of managing configurations locally in each microservice (like in application.properties 
or application.yml), Spring Cloud Config allows you to store configuration in a central repository (such as a Git repository, 
or a file system) and provide it to all your services.


**************************************************************************************************************************************


Swagger in Spring Boot – A Simple Guide
Swagger is a framework used for documenting and testing REST APIs. It allows developers to define the structure of their 
APIs in a standard format and provides a user-friendly interface for testing them. In Spring Boot applications,
Swagger can be easily integrated to create interactive API documentation.

Why Use Swagger?
API Documentation: It auto-generates API documentation and makes it interactive, allowing developers to view, test, 
and understand the endpoints without reading the code.
Easy Testing: Swagger UI provides an interface for interacting with your APIs directly from the browser.
Consistency: It helps keep the API documentation in sync with the actual implementation.


**************************************************************************************************************************************

Profiles in Spring Boot
In Spring Boot, profiles allow you to define different configurations for different environments (like development, testing,
production, etc.). Profiles help separate environment-specific configurations and prevent you from hardcoding values that might change across different environments.

Why Use Profiles?
Environment-Specific Configurations: You can define different configurations for each environment (dev, prod, test) without 
changing the code.
Flexibility: You can customize behavior depending on whether the application is running locally, on a test server, or in production.
Separation of Concerns: Profiles allow you to separate application settings (such as database configurations, logging levels, etc.)
that are environment-dependent.

1. Defining Profiles in application.properties or application.yml
You can define different configurations for each profile in application.properties or application.yml. 
For example, you can define separate properties for a development profile and a production profile.

Example with application.properties:
application.properties: General settings (common across all profiles).
application-dev.properties: Specific settings for the development environment.
application-prod.properties: Specific settings for the production environment.

2. Activating Profiles
In application.properties: spring.profiles.active=dev

3. Profile-Specific Beans and Configurations
You can specify certain beans to only be active under a specific profile using the @Profile annotation.

@Configuration
@Profile("dev")
public class DevConfig {
    @Bean
    public MyService devService() {
        return new MyService("Dev Service");
    }
}


How do you handle exceptions in Spring Boot?

 What is the purpose of Spring Boot’s @Conditional annotations?
