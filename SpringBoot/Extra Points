https://www.geeksforgeeks.org/spring-boot-interview-questions-and-answers/
https://www.geeksforgeeks.org/spring-boot-aopaspect-oriented-programming/
https://www.geeksforgeeks.org/spring-jdbc-template/
https://www.tutorialspoint.com/spring_boot/spring_boot_rest_template.htm




Database connection in springboot project :-

In a Spring Boot project, database connection is typically managed through Spring Data JPA or JDBC, and it’s
made easier with Spring Boot’s auto-configuration.


1) Add necessary dependencies in pom.xml--> spring-boot-starter-data-jpa.
2) Configure database connection properties in application.properties or application.yml.
      spring.datasource.url=jdbc:mysql://localhost:3306/mydb
      spring.datasource.username=root
      spring.datasource.password=rootpassword
      spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
      spring.jpa.hibernate.ddl-auto=update
      spring.jpa.show-sql=true
      spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

3) Create JPA entity classes.

4) Spring Data JPA provides an easy way to interact with the database through Repositories. 
You create an interface that extends JpaRepository or CrudRepository to perform CRUD operations without needing 
to write implementation code.

5) Make sure to enable JPA repositories in your main application class using @EnableJpaRepositories.
6) Use @Autowired to inject the repository into services or controllers.

One of the key benefits of Spring Boot is its auto-configuration feature.
Based on the dependencies you include (like spring-boot-starter-data-jpa),
Spring Boot automatically configures the necessary components such as:

DataSource: Connection to the database.
EntityManagerFactory: For managing JPA entities.
TransactionManager: For managing transactions with the database.


**************************************************************************************************************************************

In Spring Boot, both application.properties and bootstrap.properties are used to configure various aspects of your application,
but they have different purposes and are loaded at different stages of the application lifecycle.

1. application.properties

Purpose: The application.properties file is the most common configuration file in Spring Boot applications. 
It is used to configure application-specific properties locally.

When it's loaded: This file is loaded at the later stages of the Spring Boot application lifecycle, after the application context 
is created.

Usage: It's generally used for setting properties like database configurations, server ports, logging levels, etc.

Location: src/main/resources/application.properties (can also be application.yml).

server.port=8080
spring.datasource.url=jdbc:mysql://localhost:3306/mydb
spring.datasource.username=root
spring.datasource.password=secret
logging.level.org.springframework=DEBUG


In simple terms, bootstrap.properties is a configuration file used in Spring Boot applications that is loaded before the 
regular application.properties. It is mainly used to set up properties that are needed early in the startup process, such 
as connecting to an external configuration server (like Spring Cloud Config) or setting up the application’s environment.


Why use bootstrap.properties?
External Configuration: If your Spring Boot application is part of a larger system (like microservices), bootstrap.properties 
can be used to connect to a central place where configuration is stored (e.g., a configuration server).

Early loading: This file is loaded before other configuration files like application.properties, so it's useful for things 
that need to be configured very early, like connecting to a database or a configuration server.

# The URI of the configuration server
spring.cloud.config.uri=http://localhost:8888

# Name of the application to fetch configuration for
spring.application.name=my-service

# Active profile (like dev, prod)
spring.profiles.active=dev


How it Works:
Spring Boot will look for bootstrap.properties first, and if you’re using Spring Cloud, it will fetch the configuration 
from the server mentioned in spring.cloud.config.uri.
After the bootstrap.properties file is processed, the application will continue to load the application.properties 
file for other app-specific settings.


Spring Cloud Config – In Simple Terms
Spring Cloud Config is a tool that helps you manage and provide centralized configuration for applications in a distributed 
system or microservices architecture. Instead of managing configurations locally in each microservice (like in application.properties 
or application.yml), Spring Cloud Config allows you to store configuration in a central repository (such as a Git repository, 
or a file system) and provide it to all your services.


**************************************************************************************************************************************


Swagger in Spring Boot – A Simple Guide
Swagger is a framework used for documenting and testing REST APIs. It allows developers to define the structure of their 
APIs in a standard format and provides a user-friendly interface for testing them. In Spring Boot applications,
Swagger can be easily integrated to create interactive API documentation.

Why Use Swagger?
API Documentation: It auto-generates API documentation and makes it interactive, allowing developers to view, test, 
and understand the endpoints without reading the code.
Easy Testing: Swagger UI provides an interface for interacting with your APIs directly from the browser.
Consistency: It helps keep the API documentation in sync with the actual implementation.


**************************************************************************************************************************************

Profiles in Spring Boot
In Spring Boot, profiles allow you to define different configurations for different environments (like development, testing,
production, etc.). Profiles help separate environment-specific configurations and prevent you from hardcoding values that might change across different environments.

Why Use Profiles?
Environment-Specific Configurations: You can define different configurations for each environment (dev, prod, test) without 
changing the code.
Flexibility: You can customize behavior depending on whether the application is running locally, on a test server, or in production.
Separation of Concerns: Profiles allow you to separate application settings (such as database configurations, logging levels, etc.)
that are environment-dependent.

1. Defining Profiles in application.properties or application.yml
You can define different configurations for each profile in application.properties or application.yml. 
For example, you can define separate properties for a development profile and a production profile.

Example with application.properties:
application.properties: General settings (common across all profiles).
application-dev.properties: Specific settings for the development environment.
application-prod.properties: Specific settings for the production environment.

2. Activating Profiles
In application.properties: spring.profiles.active=dev

3. Profile-Specific Beans and Configurations
You can specify certain beans to only be active under a specific profile using the @Profile annotation.

@Configuration
@Profile("dev")
public class DevConfig {
    @Bean
    public MyService devService() {
        return new MyService("Dev Service");
    }
}


**************************************************************************************************************************************

How do you handle exceptions in Spring Boot?

Global Exception Handling with @ControllerAdvice -->
In Spring Framework, @ControllerAdvice is used for global exception handling. 
It allows you to handle exceptions across the whole application in one centralized place.
This can help reduce boilerplate code by handling exceptions in a global manner, 
rather than defining exception handlers for each individual controller.


import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

@ControllerAdvice
public class GlobalExceptionHandler {

    // Handle specific exception (e.g., IllegalArgumentException)
    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<String> handleIllegalArgumentException(IllegalArgumentException ex) {
        return new ResponseEntity<>("Illegal argument error: " + ex.getMessage(), HttpStatus.BAD_REQUEST);
    }

    // Handle general exception (fallback for all other exceptions)
    @ExceptionHandler(Exception.class)
    public ResponseEntity<String> handleException(Exception ex) {
        return new ResponseEntity<>("An error occurred: " + ex.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
    }

    // Handle custom exception (optional: specific to your app)
    @ExceptionHandler(CustomException.class)
    public ResponseEntity<String> handleCustomException(CustomException ex) {
        return new ResponseEntity<>("Custom error: " + ex.getMessage(), HttpStatus.NOT_FOUND);
    }
}
@ExceptionHandler: Inside the @ControllerAdvice class, you can use @ExceptionHandler to handle specific exceptions. 
You can handle multiple types of exceptions by specifying different methods for each exception type.
ResponseEntity: This is used to return a response with a status code and a message.

@Valid: Tells Spring to perform validation on the User object.
BindingResult: This object will store any validation errors. You must immediately follow the @Valid annotation 
with the BindingResult parameter in the method signature. If the User object fails validation, 
bindingResult will contain the error details.


You can annotate custom exceptions with @ResponseStatus to automatically return an HTTP status code when that exception is thrown.
@ResponseStatus(HttpStatus.NOT_FOUND)
public class ResourceNotFoundException extends RuntimeException {
    public ResourceNotFoundException(String message) {
        super(message);
    }
}

**************************************************************************************************************************************

What is the purpose of Spring Boot’s @Conditional annotations?

In Spring Boot, the @Conditional annotations are used to conditionally include or exclude beans from the Spring application
context based on certain conditions. These annotations allow you to configure your Spring beans in a flexible way, making your 
application more dynamic and adaptable to different environments or configurations.

The core idea is that a bean will only be registered in the Spring context if the condition(s) specified in the annotation are met.
These conditions can be based on various criteria like environment properties, operating system, class availability, 
or other application-specific conditions.

@ConditionalOnProperty:

This annotation allows you to conditionally create a bean based on the presence and value of a property in the environment
(e.g., application.properties or application.yml).
@Configuration
public class MyConfig {

    @Bean
    @ConditionalOnProperty(name = "my.feature.enabled", havingValue = "true")
    public MyFeature myFeature() {
        return new MyFeature();
    }
}

@ConditionalOnClass:

This annotation conditionally creates a bean if a particular class is present in the classpath.
@Configuration
public class MyConfig {

    @Bean
    @ConditionalOnClass(name = "com.example.SomeLibrary")
    public SomeLibraryBean someLibraryBean() {
        return new SomeLibraryBean();
    }
}

@ConditionalOnMissingBean:

This annotation is used to define a bean conditionally based on the absence of another bean in the application context.
It's useful for defining default beans only if a specific bean doesn't already exist.
@Configuration
public class MyConfig {

    @Bean
    @ConditionalOnMissingBean(MyService.class)
    public MyService defaultMyService() {
        return new DefaultMyService();
    }
}

@ConditionalOnBean:

This annotation is the opposite of @ConditionalOnMissingBean. It creates a bean only if another bean is present 
in the application context.

@ConditionalOnMissingClass:

This annotation is used to conditionally create a bean if a class is missing from the classpath.
@Configuration
public class MyConfig {

    @Bean
    @ConditionalOnMissingClass("com.example.SomeLibrary")
    public DefaultLibraryBean defaultLibraryBean() {
        return new DefaultLibraryBean();
    }
}

Custom Conditions with @Conditional
You can also create your own custom conditions by implementing the Condition interface and using @Conditional with it.

public class MyCustomCondition implements Condition {
    @Override
    public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {
        // Custom logic to determine if the condition matches
        return "true".equals(System.getProperty("my.custom.condition"));
    }
}

@Configuration
public class MyConfig {

    @Bean
    @Conditional(MyCustomCondition.class)
    public MyCustomBean myCustomBean() {
        return new MyCustomBean();
    }
}
Steps to Implement the Condition Interface
Create a Custom Condition Class: Implement the Condition interface and override the matches() method.
Define the Condition Logic: In the matches() method, write the logic to determine if the condition is true or false.
Use the @Conditional Annotation: Apply the @Conditional annotation to your bean, passing your custom condition class.



The ConditionContext in the matches() method of the Condition interface provides contextual information about the current
Spring environment and the application context, allowing you to make decisions about whether or not to register a bean based
on specific conditions.

1) getEnvironment():

Provides access to the Environment, which contains properties and configuration data
(e.g., values from application.properties, application.yml, environment variables, etc.).
String propertyValue = context.getEnvironment().getProperty("my.custom.property");

2) getBeanFactory():

Returns the BeanFactory that can be used to access or query beans in the Spring context.
You can use this to check if certain beans are already defined in the context.
boolean isBeanPresent = context.getBeanFactory().containsBean("myBean");

3) getClassLoader():

Provides access to the ClassLoader of the current application.
boolean isClassPresent = context.getClassLoader().loadClass("com.example.SomeClass") != null;


The AnnotatedTypeMetadata interface is part of the Spring framework and is used in conjunction with the Condition
interface to provide metadata about annotations 
applied to the beans or configuration classes that are being processed. Specifically, it allows access to the 
annotations applied to the target bean or class, which can then be used to make decisions about whether or not to 
register a bean in the Spring context.

getAnnotations():

Returns a collection of Annotation objects representing the annotations applied to the target class or method.
This can be useful when you need to inspect specific annotations on the class or method being processed.

hasAnnotation(String annotationType):

Checks if a particular annotation is present on the target class or method.
This can be used to check for the presence of specific annotations.

getAnnotationAttributes(String annotationType):

Returns a map of attributes for the given annotation. You can use this to retrieve specific values from an annotation
(like its properties or parameters).
Map<String, Object> attributes = metadata.getAnnotationAttributes("com.example.MyCustomAnnotation");


**************************************************************************************************************************************

What do you need to call a API of another microservice in springboot ? 


RestTeamplate :-

RestTemplate is a core class in Spring that provides methods for making HTTP requests to external services, 
enabling communication between different systems (e.g., microservices). It's part of the spring-web module 
and was commonly used in Spring applications to interact with REST APIs before the introduction of WebClient
in Spring 5 (which is a more modern, non-blocking alternative).

Key Features of RestTemplate:
Synchronous: RestTemplate is blocking and synchronous, meaning it will wait for the HTTP response before
continuing the program's execution. This can be a limitation if you're building highly concurrent or reactive systems,
but it's still useful for many traditional applications.

Flexible HTTP requests: It supports various HTTP methods (GET, POST, PUT, DELETE, etc.) and can handle different types 
of request bodies, headers, and responses.

Object mapping: It provides built-in support for converting Java objects to HTTP request bodies and mapping HTTP 
responses into Java objects (typically using Jackson or Gson for JSON).

Error handling: It offers mechanisms for handling errors from HTTP responses, such as 4xx and 5xx status codes.


1. Setup RestTemplate Bean:
In a Spring Boot application, you'll typically create a RestTemplate bean in your configuration class so that
it can be injected into other components (e.g., services or controllers).

@Configuration
public class AppConfig {

    @Bean
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }
}

2.
You can use the getForObject or getForEntity methods to make GET requests.similarly for post
String url = "https://api.example.com/data";
MyResponse response = restTemplate.getForObject(url, MyResponse.class);

String url = "https://api.example.com/data";
ResponseEntity<MyResponse> response = restTemplate.getForEntity(url, MyResponse.class);
System.out.println(response.getStatusCode());  // Prints the HTTP status
System.out.println(response.getBody());  // Prints the response body

3. Sending Custom HTTP Requests:
Sometimes you need more control over the HTTP request, such as adding custom headers, setting timeouts, 
or handling different HTTP methods. You can use the exchange method for this.

The exchange method allows you to specify the HTTP method (GET, POST, PUT, DELETE, etc.), the request
entity (which includes headers, body, etc.), and the expected response type.

When to Use RestTemplate:
Simple HTTP calls: When you need to make straightforward HTTP requests to another service, RestTemplate is a good choice.

Synchronous operations: It's perfect for cases where the blocking behavior is acceptable, such as in non-high-concurrency environments.

Legacy systems: If you're working with legacy Spring applications, RestTemplate might still be the default choice.

When Not to Use RestTemplate:
Asynchronous processing: For modern applications with high concurrency or real-time processing, consider using WebClient 
(which is non-blocking) instead of RestTemplate.

Reactive applications: If you're building a reactive application with Spring WebFlux, WebClient should be your go-to choice.


WebClient :-

WebClient is the modern, non-blocking, and asynchronous HTTP client introduced in Spring 5 as part of the 
Spring WebFlux module. It was designed to be a more flexible and efficient way of making HTTP requests in 
reactive and non-blocking applications. While RestTemplate is synchronous and blocking, WebClient is asynchronous
and non-blocking, making it more suitable for high-concurrency applications, microservices, and scenarios where
you need better performance.


Supports Synchronous and Asynchronous Calls: While WebClient is inherently asynchronous, you can still block
the response if needed using .block() (but generally, you'd want to avoid blocking in reactive apps).

Flexible API: Provides an easy-to-use and flexible API for making HTTP requests, handling responses, 
setting headers, managing timeouts, etc.


How WebClient Works:
WebClient is designed for making asynchronous HTTP requests, which means you can issue requests and immediately 
continue with other tasks, waiting for the result when needed.

It returns Mono<T> (for a single value) or Flux<T> (for multiple values), which are reactive streams that 
represent the result of the asynchronous operation.

Mono: Represents a single value or empty result.
Flux: Represents a stream of multiple values.

1. Set up WebClient Bean:
In Spring Boot, you typically set up a WebClient.Builder bean for reuse throughout your application.
@Configuration
public class WebClientConfig {

    @Bean
    public WebClient.Builder webClientBuilder() {
        return WebClient.builder();
    }
}

2. Injecting WebClient in Services:

@Service
public class ExternalService {

    private final WebClient.Builder webClientBuilder;

    @Autowired
    public ExternalService(WebClient.Builder webClientBuilder) {
        this.webClientBuilder = webClientBuilder;
    }

    public Mono<String> callExternalAPI() {
        return webClientBuilder.baseUrl("https://api.example.com")
                .get()
                .retrieve()
                .bodyToMono(String.class);
    }
}
baseUrl("https://api.example.com/data"): Sets the base URL.

.get(): HTTP GET method.

.retrieve(): Starts the HTTP request.

.bodyToMono(String.class): Extracts and returns the body of the response as a String.


Post requests:-
public Mono<MyResponse> createItem(MyRequest request) {
    return webClientBuilder.baseUrl("https://api.example.com/items")
            .post() // HTTP POST method
            .bodyValue(request) // Set the body of the request (request is an object)
            .retrieve()
            .bodyToMono(MyResponse.class); // Map the response to MyResponse class
}


This allows you to chain operations like filtering, mapping, error handling, and more.


A generic method in WebClient allows you to create a reusable method that can handle different
types of HTTP requests and responses, without being tightly coupled to a specific endpoint or object type.
This is useful when you have various endpoints that follow a similar structure but differ in the data types 
for the request and/or response.

To implement a generic method in WebClient, you can leverage Java generics to accept any response type.
Here’s how you can create a reusable, generic method that can make HTTP requests (GET, POST, PUT, etc.)
and return a response of any type.

import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

@Service
public class WebClientService {

    private final WebClient.Builder webClientBuilder;

    public WebClientService(WebClient.Builder webClientBuilder) {
        this.webClientBuilder = webClientBuilder;
    }

    /**
     * Generic method for making HTTP requests
     *
     * @param url            The URL of the API
     * @param httpMethod     The HTTP method (e.g., GET, POST, PUT, DELETE)
     * @param requestBody    The request body (optional, can be null)
     * @param responseType   The class type for the response
     * @param <T>            The response type
     * @return A Mono of type T representing the response body
     */
    public <T> Mono<T> makeRequest(String url, String httpMethod, Object requestBody, Class<T> responseType) {
        WebClient.RequestBodySpec requestSpec = webClientBuilder.baseUrl(url);

        switch (httpMethod.toUpperCase()) {
            case "GET":
                requestSpec = requestSpec.get();
                break;
            case "POST":
                requestSpec = requestSpec.post().bodyValue(requestBody);
                break;
            case "PUT":
                requestSpec = requestSpec.put().bodyValue(requestBody);
                break;
            case "DELETE":
                requestSpec = requestSpec.delete();
                break;
            default:
                throw new IllegalArgumentException("Unsupported HTTP method: " + httpMethod);
        }

        return requestSpec
                .retrieve() // Initiate the request and retrieve the response
                .bodyToMono(responseType); // Convert the response body into the specified response type
    }
}
Explanation:
makeRequest Method: This is a generic method where:

url: The endpoint to send the HTTP request to.

httpMethod: The HTTP method to use (e.g., GET, POST, PUT, DELETE).

requestBody: The body of the request, which may be null for methods like GET and DELETE.

responseType: The class type of the expected response.

<T>: This is the generic type that allows the method to return a response of any type, based on the provided class type.

WebClient.RequestBodySpec: This is a flexible builder that allows you to specify the type of HTTP request you are 
making (GET, POST, etc.), along with setting the request body if needed.

retrieve(): Initiates the request and prepares for response handling.

bodyToMono(responseType): Converts the response body to a Mono of the specified response type T.


An API Gateway is a key component in system design, particularly in microservices architectures and modern web applications. 
It serves as a centralized entry point for managing and routing requests from clients to the appropriate microservices or
backend services within a system.

it manages a number of responsibilities, including rate limitation, routing, and authentication, 
before forwarding the requests to the appropriate backend services.

Retry mechanism in springboot, allows your application to automatically attempt an operation again in case of failure(n/w error,timeout).
1. Add spring-retry dependency
2. Add @EnableRetry in main class
3. Write @Retryable annotated method which is perfoming a specific task and can get failed(paymnetgateway).and can give maxAttempts in this 
   annotation.
4. After all attempts if gets failed then calls a method annotated with @Recover.


n Spring Boot, application.yml and application.properties are two different formats used to define configuration 
settings for your application. They serve the same purpose but have different syntax.

1. application.properties
This is the traditional format, simple and flat:
server.port=8081
spring.datasource.url=jdbc:mysql://localhost:3306/mydb
spring.datasource.username=root
spring.datasource.password=pass
Pros:
• Simple to read for small configurations
• Familiar to developers coming from older Spring apps
Cons:
• Gets hard to manage with nested properties or complex configurations
2. application.yml
YAML format allows hierarchical (nested) configuration:
server:
 port: 8081
spring:
 datasource:
   url: jdbc:mysql://localhost:3306/mydb
   username: root
   password: pass
Pros:
• Cleaner for nested configs
• Easier to organize complex structures
Cons:
• Indentation matters (can be error-prone)
• Syntax errors are harder to spot compared to .properties
Which to Use?
Both are supported equally by Spring Boot. It’s mostly a matter of preference or project convention. 
You shouldn’t mix them unnecessarily—though you can technically use both, values in application.properties will
override application.yml if both are present.
